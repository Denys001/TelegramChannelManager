[{"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\index.js":"1","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\App.js":"2","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\reportWebVitals.js":"3","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Login\\Login.js":"4","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Register\\Register.js":"5","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\store.js":"6","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Login\\loginForm.js":"7","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Register\\registerForm.js":"8","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\authLayout.js":"9","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\MyInput.js":"10","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\utils\\validators\\validators.js":"11","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\api\\api.js":"12","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\reducers\\authReducer.js":"13","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\api\\request.js":"14","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\common\\Loader\\Loader.js":"15","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Routes\\MainRoute.js":"16","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\reducers\\channelsReducer.js":"17","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\reducers\\postsReducer.js":"18","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\common\\Menu\\Menu.js":"19","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\Step1.js":"20","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\Step2.js":"21","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\PostView\\PostView.js":"22","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\OneStep.js":"23","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\PostView\\PostCard\\PostCard.js":"24","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\store\\index.js":"25","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\store\\reducers.js":"26","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\channels\\index.js":"27","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\auth\\index.js":"28","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\posts\\index.js":"29","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\posts\\selectors.js":"30","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\posts\\reducer.js":"31","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\posts\\actions.js":"32","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\posts\\sagas.js":"33","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\auth\\selectors.js":"34","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\auth\\actions.js":"35","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\auth\\reducer.js":"36","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\auth\\sagas.js":"37","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\channels\\selectors.js":"38","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\channels\\actions.js":"39","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\channels\\reducer.js":"40","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\channels\\sagas.js":"41","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\PostView\\PostCard\\SplitButton\\index.js":"42","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\PostPage\\index.js":"43","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Statistic\\index.js":"44","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\statistic\\index.js":"45","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\statistic\\sagas.js":"46","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\statistic\\selectors.js":"47","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\statistic\\actions.js":"48","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\statistic\\reducer.js":"49","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\PostTabs\\index.js":"50","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\index.js":"51","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Posts\\index.js":"52","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\CreatePost\\index.js":"53","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\index.js":"54","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Creation\\index.js":"55","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\archive\\index.js":"56","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\archive\\reducer.js":"57","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\archive\\actions.js":"58","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\archive\\selectors.js":"59","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\archive\\sagas.js":"60","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Archive\\index.js":"61","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Archive\\PostView\\PostView.js":"62","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Archive\\PostView\\PostCard\\PostCard.js":"63","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Archive\\PostView\\PostCard\\SplitButton\\index.js":"64","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\trash\\index.js":"65","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\trash\\sagas.js":"66","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\trash\\reducer.js":"67","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\trash\\actions.js":"68","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\trash\\selectors.js":"69","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Trash\\index.js":"70","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Trash\\PostView\\PostView.js":"71","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Trash\\PostView\\PostCard\\PostCard.js":"72","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Trash\\PostView\\PostCard\\SplitButton\\index.js":"73","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\CreateQuiz\\index.js":"74","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\quizs\\index.js":"75","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\quizs\\sagas.js":"76","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\quizs\\selectors.js":"77","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\quizs\\reducer.js":"78","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\quizs\\actions.js":"79","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\ChannelPage\\index.js":"80"},{"size":478,"mtime":1611408625988,"results":"81","hashOfConfig":"82"},{"size":412,"mtime":1613078967478,"results":"83","hashOfConfig":"82"},{"size":362,"mtime":499162500000,"results":"84","hashOfConfig":"82"},{"size":1252,"mtime":1613232615468,"results":"85","hashOfConfig":"82"},{"size":1174,"mtime":1613231577478,"results":"86","hashOfConfig":"82"},{"size":666,"mtime":1613068429447,"results":"87","hashOfConfig":"82"},{"size":2823,"mtime":1612253522382,"results":"88","hashOfConfig":"82"},{"size":3492,"mtime":1611501455282,"results":"89","hashOfConfig":"82"},{"size":1898,"mtime":1611490237390,"results":"90","hashOfConfig":"82"},{"size":790,"mtime":1611494921146,"results":"91","hashOfConfig":"82"},{"size":730,"mtime":1611489956583,"results":"92","hashOfConfig":"82"},{"size":6647,"mtime":1623773164522,"results":"93","hashOfConfig":"82"},{"size":1775,"mtime":1613068429441,"results":"94","hashOfConfig":"82"},{"size":474,"mtime":1613068428975,"results":"95","hashOfConfig":"82"},{"size":364,"mtime":1611508335094,"results":"96","hashOfConfig":"82"},{"size":1545,"mtime":1618743953913,"results":"97","hashOfConfig":"82"},{"size":1936,"mtime":1613068429446,"results":"98","hashOfConfig":"82"},{"size":1695,"mtime":1613068429447,"results":"99","hashOfConfig":"82"},{"size":6034,"mtime":1618739895061,"results":"100","hashOfConfig":"82"},{"size":1483,"mtime":1613205303140,"results":"101","hashOfConfig":"82"},{"size":5842,"mtime":1613205372887,"results":"102","hashOfConfig":"82"},{"size":2039,"mtime":1622990258659,"results":"103","hashOfConfig":"82"},{"size":934,"mtime":1613068429179,"results":"104","hashOfConfig":"82"},{"size":3498,"mtime":1622991597809,"results":"105","hashOfConfig":"82"},{"size":867,"mtime":1623427606242,"results":"106","hashOfConfig":"82"},{"size":522,"mtime":1623427579280,"results":"107","hashOfConfig":"82"},{"size":218,"mtime":1613069373413,"results":"108","hashOfConfig":"82"},{"size":218,"mtime":1613069372121,"results":"109","hashOfConfig":"82"},{"size":218,"mtime":1613069355026,"results":"110","hashOfConfig":"82"},{"size":678,"mtime":1615377095361,"results":"111","hashOfConfig":"82"},{"size":1768,"mtime":1622908588896,"results":"112","hashOfConfig":"82"},{"size":1449,"mtime":1622976889267,"results":"113","hashOfConfig":"82"},{"size":5375,"mtime":1622977022898,"results":"114","hashOfConfig":"82"},{"size":209,"mtime":1613122143584,"results":"115","hashOfConfig":"82"},{"size":459,"mtime":1613122857701,"results":"116","hashOfConfig":"82"},{"size":413,"mtime":1613071900721,"results":"117","hashOfConfig":"82"},{"size":1415,"mtime":1613123583659,"results":"118","hashOfConfig":"82"},{"size":383,"mtime":1618495725948,"results":"119","hashOfConfig":"82"},{"size":933,"mtime":1623773543018,"results":"120","hashOfConfig":"82"},{"size":1115,"mtime":1615291003186,"results":"121","hashOfConfig":"82"},{"size":2864,"mtime":1623773216628,"results":"122","hashOfConfig":"82"},{"size":7229,"mtime":1622977080638,"results":"123","hashOfConfig":"82"},{"size":6931,"mtime":1623754641636,"results":"124","hashOfConfig":"82"},{"size":13130,"mtime":1623752300349,"results":"125","hashOfConfig":"82"},{"size":220,"mtime":1615580895356,"results":"126","hashOfConfig":"82"},{"size":723,"mtime":1615652183272,"results":"127","hashOfConfig":"82"},{"size":290,"mtime":1615584569534,"results":"128","hashOfConfig":"82"},{"size":320,"mtime":1615647843790,"results":"129","hashOfConfig":"82"},{"size":669,"mtime":1623689046330,"results":"130","hashOfConfig":"82"},{"size":3869,"mtime":1622998937715,"results":"131","hashOfConfig":"82"},{"size":4154,"mtime":1623754501963,"results":"132","hashOfConfig":"82"},{"size":1556,"mtime":1618743788748,"results":"133","hashOfConfig":"82"},{"size":5545,"mtime":1622743039615,"results":"134","hashOfConfig":"82"},{"size":5661,"mtime":1618743925079,"results":"135","hashOfConfig":"82"},{"size":3613,"mtime":1622999823672,"results":"136","hashOfConfig":"82"},{"size":218,"mtime":1618862085405,"results":"137","hashOfConfig":"82"},{"size":523,"mtime":1622908559879,"results":"138","hashOfConfig":"82"},{"size":906,"mtime":1622978664589,"results":"139","hashOfConfig":"82"},{"size":521,"mtime":1622902883156,"results":"140","hashOfConfig":"82"},{"size":3166,"mtime":1622978643307,"results":"141","hashOfConfig":"82"},{"size":1553,"mtime":1619026168201,"results":"142","hashOfConfig":"82"},{"size":2039,"mtime":1622991341751,"results":"143","hashOfConfig":"82"},{"size":3514,"mtime":1622991422172,"results":"144","hashOfConfig":"82"},{"size":5770,"mtime":1622978787587,"results":"145","hashOfConfig":"82"},{"size":218,"mtime":1618862085405,"results":"146","hashOfConfig":"82"},{"size":2704,"mtime":1622913335871,"results":"147","hashOfConfig":"82"},{"size":513,"mtime":1622909549455,"results":"148","hashOfConfig":"82"},{"size":832,"mtime":1622913371826,"results":"149","hashOfConfig":"82"},{"size":509,"mtime":1622909538097,"results":"150","hashOfConfig":"82"},{"size":1531,"mtime":1622911436440,"results":"151","hashOfConfig":"82"},{"size":2039,"mtime":1622991656488,"results":"152","hashOfConfig":"82"},{"size":3512,"mtime":1622991822083,"results":"153","hashOfConfig":"82"},{"size":5726,"mtime":1622913395089,"results":"154","hashOfConfig":"82"},{"size":16616,"mtime":1623599439695,"results":"155","hashOfConfig":"82"},{"size":220,"mtime":1623427095719,"results":"156","hashOfConfig":"82"},{"size":1467,"mtime":1623599924763,"results":"157","hashOfConfig":"82"},{"size":451,"mtime":1623593118822,"results":"158","hashOfConfig":"82"},{"size":1336,"mtime":1623599627658,"results":"159","hashOfConfig":"82"},{"size":1071,"mtime":1623599670848,"results":"160","hashOfConfig":"82"},{"size":10652,"mtime":1623773486189,"results":"161","hashOfConfig":"82"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},"s4q6x",{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"164"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"164"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"164"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"194"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"164"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"207"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"164"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"164"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"164"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"164"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"164"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"164"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"164"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"164"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"164"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"164"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"164"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"164"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"164"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"164"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"164"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"164"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"264","messages":"265","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"164"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"271","usedDeprecatedRules":"164"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"164"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"164"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"164"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"164"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"164"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"164"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"164"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"164"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"164"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"164"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"164"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"164"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"164"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"324","messages":"325","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"164"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"164"},{"filePath":"330","messages":"331","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"164"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"164"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"164"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"164"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"164"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"164"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"164"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"164"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"164"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"164"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"164"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"164"},{"filePath":"363","messages":"364","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"164"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"164"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"164"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\index.js",[],["374","375"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\App.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\reportWebVitals.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Login\\Login.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Register\\Register.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\store.js",[],["376","377"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Login\\loginForm.js",["378","379","380","381","382"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Field } from 'redux-form'\r\nimport { reduxForm } from 'redux-form'\r\nimport Button from '@material-ui/core/Button'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport LinkS from '@material-ui/core/Link'\r\nimport Box from '@material-ui/core/Box'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport MyInput from '../MyInput'\r\nimport {email, required} from \"./../../../utils/validators/validators\"\r\nconst useStyles = makeStyles((theme) => ({\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\nfunction LoginForm(props) {\r\n    const classes = useStyles()\r\n    const { handleSubmit, pristine, reset, submitting } = props\r\n    return (\r\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n            <Field\r\n                id=\"email\"\r\n                label=\"Електрона адреса\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                component={MyInput}\r\n                validate={[required, email]}\r\n            />\r\n            <Field\r\n                name=\"password\"\r\n                label=\"Пароль\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                component={MyInput}\r\n                validate={[required]}\r\n            />\r\n            {/* <FormControlLabel\r\n                            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                            label=\"Remember me\"\r\n                            /> */}\r\n\r\n            <Grid container>\r\n                {/* <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\">\r\n                                Forgot password?\r\n                                </Link>\r\n                            </Grid> */}\r\n                <Grid item>\r\n                    <Link to=\"/register\">\r\n                        <LinkS variant=\"body2\">\r\n                            {\"Ще не маєте акаунту? Зареєструватися\"}\r\n                        </LinkS>\r\n                    </Link>\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n                disabled={submitting}\r\n            >\r\n                Увійти\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm({ form: 'login' })(LoginForm)\r\nexport default LoginReduxForm","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Register\\registerForm.js",["383","384","385","386","387","388"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport LinkS from '@material-ui/core/Link'\r\nimport { Link } from 'react-router-dom'\r\nimport Box from '@material-ui/core/Box'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Field } from 'redux-form'\r\nimport { reduxForm } from 'redux-form'\r\nimport MyInput from './../MyInput'\r\nimport {email, required, minLengthCreator} from \"./../../../utils/validators/validators\"\r\nconst useStyles = makeStyles((theme) => ({\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\nconst min6 = minLengthCreator(6)\r\nfunction RegisterForm(props) {\r\n    const classes = useStyles()\r\n    const { handleSubmit, pristine, reset, submitting } = props\r\n    return (\r\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n            <Field\r\n                id=\"email\"\r\n                label=\"Електрона адреса\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                component={MyInput}\r\n                validate={[required, email]}\r\n            />\r\n            <Field\r\n                id=\"nickName\"\r\n                label=\"Нікнейм\"\r\n                name=\"nickName\"\r\n                autoComplete=\"nickName\"\r\n                component={MyInput}\r\n                validate={[required, min6]}\r\n            />\r\n            <Field\r\n                name=\"password\"\r\n                label=\"Пароль\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                component={MyInput}\r\n                validate={[required, min6]}\r\n            />\r\n            <Field\r\n                name=\"passwordConfirm\"\r\n                label=\"Підтвердження паролю\"\r\n                type=\"password\"\r\n                id=\"passwordConfirm\"\r\n                component={MyInput}\r\n                validate={[required]}\r\n            />\r\n            {/* <FormControlLabel\r\n                            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                            label=\"Remember me\"\r\n                            /> */}\r\n\r\n            <Grid container>\r\n                {/* <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\">\r\n                                Forgot password?\r\n                                </Link>\r\n                            </Grid> */}\r\n                <Grid item>\r\n                    <Link to=\"/login\">\r\n                        <LinkS variant=\"body2\">\r\n                            {\"Вже маєте акаунт? Увійти\"}\r\n                        </LinkS>\r\n                    </Link>\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n                disabled={submitting}\r\n            >\r\n                Зареєструватися\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\nconst RegisterReduxForm = reduxForm({ form: 'register' })(RegisterForm)\r\nexport default RegisterReduxForm","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\authLayout.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\MyInput.js",["389"],"import React, { Component } from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nconst MyInput = field => {\r\n    const hasError = field.meta.touched && field.meta.error;\r\n    if (!hasError)\r\n        return (\r\n            < TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n                {...field}\r\n                {...field.input}\r\n            ></TextField >\r\n        )\r\n    else\r\n        return (\r\n            <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n                {...field}\r\n                {...field.input}\r\n                error\r\n                helperText={field.meta.error}\r\n            ></TextField>\r\n        )\r\n}\r\nexport default MyInput","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\utils\\validators\\validators.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\api\\api.js",["390"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\reducers\\authReducer.js",["391"],"import { authAPI } from './../../api/api'\r\nimport { stopSubmit } from 'redux-form'\r\nconst initialState = {\r\n    fetching: false,\r\n    isAuth: false,\r\n    token: null,\r\n    refreshToken: null\r\n}\r\nconst SETFETCHING = \"setFetching\"\r\nconst SETAUTH = \"setAuth\"\r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SETFETCHING:\r\n            return { ...state, ...action.payload }\r\n        case SETAUTH:\r\n            return { ...state, ...action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setFetching = (value) => ({ type: SETFETCHING, payload: { fetching: value } })\r\nexport const setAuth = (token, refreshToken) => ({ type: SETAUTH, payload: { isAuth: true, token, refreshToken } })\r\n\r\nexport const LoginRequest = (data) => {\r\n    return (dispatch) => {\r\n        dispatch(setFetching(true))\r\n        authAPI.login(data).then(res => {\r\n            if (res.ResultCode === 1) {\r\n                dispatch(stopSubmit('login', { [res.field]: res.message }))\r\n            } else {\r\n                dispatch(setAuth(res.token, res.refreshToken))\r\n            }\r\n            dispatch(setFetching(false))\r\n\r\n        })\r\n\r\n    }\r\n}\r\nexport const RegisterRequest = (data) => {\r\n    return (dispatch) => {\r\n        dispatch(setFetching(true))\r\n        authAPI.register(data).then(res => {\r\n            if (res.ResultCode === 1) {\r\n                dispatch(stopSubmit('register', { [res.field]: res.message }))\r\n            } else {\r\n                dispatch(setAuth(res.token))\r\n                authAPI.login(data).then(res => {\r\n                    dispatch(setAuth(res.token, res.refreshToken))\r\n                })\r\n            }\r\n            \r\n            dispatch(setFetching(false))\r\n        })\r\n\r\n    }\r\n}\r\n\r\n\r\n",["392","393"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\api\\request.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\common\\Loader\\Loader.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Routes\\MainRoute.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\reducers\\channelsReducer.js",["394"],"import { channelAPI } from '../../api/api'\r\n\r\nconst initialState = {\r\n    channels: [],\r\n    code: null,\r\n    fetching: false\r\n}\r\nconst GENERATECODE = 'generateCode'\r\nconst NULLCODE = 'nullCode'\r\nconst SET = 'SET'\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case GENERATECODE:\r\n            var result = '';\r\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n            var charactersLength = characters.length;\r\n            for (var i = 0; i < 5; i++) {\r\n                result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n            }\r\n            return { ...state, code: result }\r\n        case NULLCODE:\r\n            return { ...state, ...payload }\r\n        case SET:\r\n            return { ...state, ...payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const generateCode = () => ({ type: GENERATECODE })\r\nexport const set = (value) => ({ type: SET, payload: value })\r\nexport const setErrorNull = () => ({ type: SET, payload: {error: false, errorMessage: ''} })\r\n\r\nexport const loadChannels = (token) => {\r\n    return async (dispatch) => {\r\n        dispatch(set({ fetching: true }))\r\n        const channels = await channelAPI.channels(token)\r\n        dispatch(set({ channels: channels.channels }))\r\n        dispatch(set({ fetching: false }))\r\n    }\r\n}\r\nexport const addChannels = (code, token) => {\r\n    return async (dispatch) => {\r\n        dispatch(set({ fetching: true }))\r\n        const add_result = await channelAPI.add(code, token)\r\n        if(add_result.ResultCode === 0){\r\n            const channels = await channelAPI.channels(token)\r\n            dispatch(set({ channels: channels.channels }))\r\n            dispatch(set({ code: null }))\r\n        }\r\n        dispatch(set({ fetching: false }))\r\n        if(add_result.ResultCode === 1){\r\n            return add_result.message\r\n        }\r\n        \r\n    }\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\reducers\\postsReducer.js",["395","396"],"import {postAPI} from '../../api/api'\r\nconst initialState = {\r\n    items: [\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n        \"fddffd\",\r\n    ],\r\n    currentPage: 1,\r\n    totalItemsCount: 12,\r\n    fetching: false, \r\n    currentPostText: '',\r\n    buttonDisable: true,\r\n    image: null\r\n}\r\nconst SET = 'SET POST'\r\nconst SET_POST_TEXT = 'SET POST TEXT'\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case SET:\r\n            return { ...state, ...payload }\r\n        case SET_POST_TEXT:\r\n            return { ...state, ...payload }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const set = (value) => ({ type: SET, payload: value })\r\nexport const setCurrentPostText = (value) => ({ type: SET_POST_TEXT, payload: { currentPostText: value, buttonDisable: false } })\r\nexport const setImage = (value) => ({ type: SET, payload: { image: value } })\r\nexport const create = (token, channel, content, image) => {\r\n    return  async (dispatch) => {\r\n        content = content.replaceAll('<p>', '')\r\n        content = content.replaceAll('</p>', '')\r\n        content = content.replaceAll(/(<ul>\\n)/g, '')\r\n        content = content.replaceAll('</ul>\\n', '')\r\n        content = content.replaceAll('<li>', '- ')\r\n        content = content.replaceAll('</li>', '')\r\n        //content = content.replaceAll(/(\\n\\n)/g, '')\r\n        const result = await postAPI.create(token, content, channel, image)\r\n        dispatch(set({currentPostText: '', buttonDisable: true, image: {}}))\r\n    }\r\n}",["397","398"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\common\\Menu\\Menu.js",["399","400","401"],"import React, { useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport Loader from '../Loader/Loader'\r\nimport { loadChannels } from './../../../redux/reducers/channelsReducer'\r\nimport { Link } from 'react-router-dom'\r\nimport css from './Menu.module.css'\r\nimport TelegramIcon from '@material-ui/icons/Telegram'\r\nimport AddBoxIcon from '@material-ui/icons/AddBox'\r\nimport channelsReducer from '../../../modules/channels'\r\nimport postsReducer from '../../../modules/posts'\r\n\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('md')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('md')]: {\r\n      //width: `calc(100% - ${drawerWidth}px)`,\r\n      width: '100%',\r\n      marginLeft: drawerWidth,\r\n      zIndex: '9999',\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('md')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n    [theme.breakpoints.down('md')]: {\r\n      padding: theme.spacing(2),\r\n    },\r\n    [theme.breakpoints.down('sm')]: {\r\n      padding: theme.spacing(1),\r\n    },\r\n  },\r\n  title: {\r\n    paddingLeft: 9,\r\n    fontSize: 16,\r\n    [theme.breakpoints.down(500)]: {\r\n      fontSize: 15\r\n    },\r\n    [theme.breakpoints.down(350)]: {\r\n      fontSize: 12,\r\n    },\r\n  },\r\n  LinkActive: {\r\n    color: theme.palette.primary\r\n  }\r\n}));\r\n\r\nfunction ResponsiveDrawer(props) {\r\n  const isFetching = useSelector(channelsReducer.getFetching)\r\n  const channels = useSelector(channelsReducer.getChannels)\r\n  const id = useSelector(channelsReducer.getCurrentChannel)\r\n  const dispatch = useDispatch()\r\n  const { window } = props;\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    dispatch(channelsReducer.loadChannels())\r\n  }, [])\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <Divider />\r\n      <List>\r\n        <Link to='/channel/add' className={css.Link} onClick={() => {\r\n          dispatch(channelsReducer.setCurrentChannel(null))\r\n        }}>\r\n          <ListItem button key=\"1\" >\r\n            <ListItemIcon><AddBoxIcon /></ListItemIcon>\r\n            <ListItemText primary=\"Додати канал\" />\r\n          </ListItem>\r\n        </Link>\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {channels !== undefined && channels.length !== 0 && channels.map((el) => (\r\n          <Link to={`/channel/${el._id}`} className={css.Link} exact onClick={() => {\r\n            dispatch(channelsReducer.setCurrentChannel(el._id))\r\n          }}>\r\n            <ListItem button key={el.name}>\r\n              <ListItemIcon><TelegramIcon className={id === el._id && css.LinkActive} /></ListItemIcon>\r\n              <ListItemText primary={el.name} />\r\n            </ListItem>\r\n          </Link>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  const container = window !== undefined ? () => window().document.body : undefined;\r\n\r\n\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {isFetching && <Loader></Loader>}\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <TelegramIcon />\r\n          <Typography variant=\"h6\" className={classes.title} noWrap>\r\n            TCCM\r\n          </Typography>\r\n\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden mdUp implementation=\"css\">\r\n          <Drawer\r\n            container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden smDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        {props.children}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nResponsiveDrawer.propTypes = {\r\n  window: PropTypes.func,\r\n};\r\n\r\nexport default ResponsiveDrawer","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\Step1.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\Step2.js",["402","403"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport Step from '@material-ui/core/Step'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport StepButton from '@material-ui/core/StepButton'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { connect } from 'react-redux'\r\nimport OneStep from './OneStep'\r\nimport step1_img from './../../../asset/step1.png'\r\nimport step2_img from './../../../asset/step2.png'\r\nimport step3_img from './../../../asset/step3.png'\r\nimport step4_img from './../../../asset/step4.png'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    button: {\r\n      marginTop: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    actionsContainer: {\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    resetContainer: {\r\n      padding: theme.spacing(3),\r\n    },\r\n  }))\r\n  \r\n  function getSteps() {\r\n    return [\r\n        'Надіслати код в канал', \r\n        'Знайти телеграм бота', \r\n        'Переслати повідомлення з кодом з телеграм каналу',\r\n        'Додати бота як адміністратора'\r\n    ]\r\n  }\r\n  \r\n  function getStepContent(step) {\r\n    switch (step) {\r\n      case 0:\r\n        return <OneStep \r\n                    text=\"Згенерований код відправте в чат створеного телеграм каналу\"\r\n                    imgPath={step1_img}\r\n                />\r\n      case 1:\r\n        return <OneStep \r\n                    text=\"В пошуку знайдіть телеграм бота з назвою tcm_xBot\"\r\n                    imgPath={step2_img}\r\n                />\r\n      case 2:\r\n        return <OneStep \r\n                    text=\"Перешліть повідомлення з кодом з телеграм каналу в чат з ботом tcm_xBot\"\r\n                    imgPath={step3_img}\r\n                />\r\n      case 3:\r\n        return <OneStep \r\n                    text=\"Добавте телеграм бота tcm_xBot як адміністратора в телеграм канал\"\r\n                    imgPath={step4_img}\r\n                />\r\n      default:\r\n        return 'Unknown step'\r\n    }\r\n  }\r\n  function Step2(props) {\r\n    const classes = useStyles();\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [completed, setCompleted] = React.useState({});\r\n    const steps = getSteps();\r\n  \r\n    const totalSteps = () => {\r\n      return steps.length;\r\n    };\r\n  \r\n    const completedSteps = () => {\r\n      return Object.keys(completed).length;\r\n    };\r\n  \r\n    const isLastStep = () => {\r\n      return activeStep === totalSteps() - 1;\r\n    };\r\n  \r\n    const allStepsCompleted = () => {\r\n      return completedSteps() === totalSteps();\r\n    };\r\n  \r\n    const handleNext = () => {\r\n      const newActiveStep =\r\n        isLastStep() && !allStepsCompleted()\r\n          ? // It's the last step, but not all steps have been completed,\r\n            // find the first step that has been completed\r\n            steps.findIndex((step, i) => !(i in completed))\r\n          : activeStep + 1;\r\n      setActiveStep(newActiveStep);\r\n    };\r\n  \r\n    const handleBack = () => {\r\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n  \r\n    const handleStep = (step) => () => {\r\n      setActiveStep(step);\r\n    };\r\n  \r\n    const handleComplete = () => {\r\n      const newCompleted = completed;\r\n      newCompleted[activeStep] = true;\r\n      setCompleted(newCompleted);\r\n      handleNext();\r\n    };\r\n  \r\n    const handleReset = () => {\r\n      setActiveStep(0);\r\n      setCompleted({});\r\n    };\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <Divider/>\r\n        <Stepper nonLinear activeStep={activeStep} orientation=\"vertical\">\r\n          {steps.map((label, index) => (\r\n            <Step key={label}>\r\n              <StepButton onClick={handleStep(index)} completed={completed[index]}>\r\n                {label}\r\n              </StepButton>\r\n            </Step>\r\n          ))}\r\n        </Stepper>\r\n        <div>\r\n          {allStepsCompleted() ? (\r\n            <div>\r\n              <Typography className={classes.instructions}>\r\n                Всі кроки завершині\r\n              </Typography>\r\n              <Button onClick={handleReset}>Заново</Button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n              <div>\r\n                <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n                  Назад\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleNext}\r\n                  className={classes.button}\r\n                >\r\n                  Далі\r\n                </Button>\r\n                {/* {activeStep !== steps.length &&\r\n                  (completed[activeStep] ? (\r\n                    <Typography variant=\"caption\" className={classes.completed}>\r\n                      Крок {activeStep + 1} вже завершиний\r\n                    </Typography>\r\n                  ) : (\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleComplete} className={classes.button}>\r\n                      {completedSteps() === totalSteps() - 1 ? 'Завершити' : 'Завершити крок'}\r\n                    </Button>\r\n                  ))} */}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\nexport default Step2","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\PostView\\PostView.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\OneStep.js",["404","405"],"import React from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Divider } from '@material-ui/core'\r\nconst useStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: 10,\r\n        marginTop: 10\r\n    },\r\n    img: {\r\n        borderRadius: 5,\r\n        [theme.breakpoints.down(375)]: {\r\n            height: 100\r\n        },\r\n        \r\n    }\r\n}))\r\nconst OneStep = ({ text, imgPath }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <div>\r\n            <Divider/>\r\n            <Typography>{text}</Typography>\r\n            <div className={classes.wrapper}>\r\n            <img src={imgPath} height=\"150px\" className={classes.img}/>\r\n\r\n            </div>\r\n            <Divider/>\r\n        </div>\r\n    )\r\n}\r\nexport default OneStep\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\PostView\\PostCard\\PostCard.js",["406","407","408","409","410","411","412","413","414","415","416","417","418"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport clsx from 'clsx'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { primary } from '@material-ui/core/colors'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport ShareIcon from '@material-ui/icons/Share'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport { Tab } from '@material-ui/core/Tab'\r\nimport SplitButton from './SplitButton'\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 260, //345\r\n    height: '100%',\r\n    margin: 'auto',\r\n  },\r\n  media: {\r\n    height: 150// 200\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  avatar: {\r\n    backgroundColor: theme.palette.primary.main\r\n  },\r\n}))\r\nconst makeContent = (value) => {\r\n  if (value.length >= 100 || (value.match(new RegExp(\"\\n\", \"g\")) || []).length >= 2) {\r\n    if (value.length >= 100) {\r\n      return value.replaceAll('\\n', '<br>').substring(0, 100) + \"...\"\r\n    }\r\n    if ((value.match(new RegExp(\"\\n\", \"g\")) || []).length >= 2) {\r\n      const arr = value.replaceAll('\\n', '<br>').split('<br>')\r\n      return arr[0] + '<br>' + arr[1] + \"...\"\r\n    }\r\n  } else {\r\n    return value.replaceAll('\\n', '<br>')\r\n  }\r\n}\r\nconst makeContentQuiz = (value) => {\r\n  const content = JSON.parse(value)\r\n  if (content.question.length >= 100) {\r\n    return content.question.substring(0, 100) + \"...\"\r\n  } else {\r\n    return content.question\r\n  }\r\n}\r\nfunction PostCard(props) {\r\n  const classes = useStyles()\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        // avatar={\r\n        //   <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n        //     T\r\n        //   </Avatar>\r\n        // }\r\n        action={\r\n          <SplitButton id={props.id} post={props.el} />\r\n        }\r\n        subheader={\r\n          <div>\r\n            <Typography gutterBottom variant=\"p\" component=\"p\">\r\n              {props.subheader}\r\n            </Typography>\r\n            <Typography gutterBottom variant=\"p\" component=\"p\">\r\n              {props.type === \"default\" ? \"Пост\" : \"Опитування\"}\r\n            </Typography>\r\n          </div>\r\n        }\r\n      />\r\n\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={props.image}\r\n        component=\"img\"\r\n      //title=\"Paella dish\"\r\n      />\r\n      {/* <img src=\"http://localhost:5000/uploads/16132302542147piGl5w3LVIhcnTsUM6JRLJp4amTY9WUh6GeryYm.jpeg\" className={classes.media} ></img> */}\r\n      <CardContent>\r\n\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          <td dangerouslySetInnerHTML={{\r\n            __html: props.type === \"default\" ? makeContent(props.content) : makeContentQuiz(props.content)\r\n          }} />\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\nexport default PostCard","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\store\\index.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\store\\reducers.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\channels\\index.js",["419"],"import sagas from './sagas'\r\nimport reducer from './reducer'\r\nimport actions from './actions'\r\nimport selectors from './selectors'\r\n\r\nexport {\r\n    reducer, sagas\r\n}\r\n\r\nexport default {\r\n    ...selectors, ...actions\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\auth\\index.js",["420"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\posts\\index.js",["421"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\posts\\selectors.js",["422"],"export default {\r\n    getToken: (state) => state.auth.token,\r\n    getContent: (state) => state.posts.currentPostText,\r\n    getImage: (state) => state.posts.image,\r\n    getChannels: (state) => state.channels.channels,\r\n    getIsButtonDisabled: (state) => state.posts.isButtonDisabled,\r\n    getFetching: (state) => state.posts.fetching,\r\n    getPosts: (state) => state.posts.items,\r\n    getCurrentPage: (state) => state.posts.currentPage,\r\n    getTotalItemsCount: (state) => state.posts.totalItemsCount,\r\n    getPageSize: (state) => state.posts.pageSize,\r\n    getCurrentChannel: (state) => state.channels.currentChannel,\r\n    getCurrentPost: (state) => state.posts.currentPost,\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\posts\\reducer.js",["423","424"],"const initialState = {\r\n    items: [],\r\n    currentPage: 1,\r\n    totalItemsCount: 1,\r\n    pageSize: 9,\r\n    fetching: false,\r\n    currentPostText: '',\r\n    isButtonDisabled: true,\r\n    image: null, \r\n    currentPost: null\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case 'POSTS/SET/CURRENT/POST/TEXT':\r\n            var content = payload.currentPostText\r\n            content = content.replaceAll('<p>', '')\r\n            content = content.replaceAll('</p>', '')\r\n            content = content.replaceAll(/(<ul>\\n)/g, '')\r\n            content = content.replaceAll('</ul>\\n', '')\r\n            content = content.replaceAll('<li>', '- ')\r\n            content = content.replaceAll('</li>', '')\r\n            content = content.replaceAll(/<span[^>]*>/g, '')\r\n            content = content.replaceAll('</span>', '')\r\n            content = content.replaceAll('&nbsp', '')\r\n            content = content.replaceAll(/ style=\"[^\"]*\"/g, '')\r\n            content = content.replaceAll('</span>', '')\r\n            content = content.replaceAll('<p>', '')\r\n            content = content.trim()\r\n            var disabled = true\r\n            if (content !== '') {\r\n                disabled = false\r\n            }\r\n            return { ...state, ...payload, isButtonDisabled: disabled }\r\n        case 'POSTS/SET/FETCHING':\r\n        case 'POSTS/SET/BUTTON/DISABLED':\r\n        case 'POSTS/SET/IMAGE':\r\n        case 'POSTS/SET/':\r\n        case 'POSTS/SET/TotalCount':\r\n        case 'POSTS/SET/CurrentPage':\r\n        //case 'POSTS/DUBLICATE':\r\n        //case 'POSTS/TRASH':\r\n        //case 'POSTS/DELETE':\r\n        case 'POSTS/SET/CURRENT':\r\n            return { ...state, ...payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\posts\\actions.js",["425"],"export default {\r\n    createPost: (channel, inArchieve)=> ({type: 'POSTS/CREATE', payload: {channel, inArchieve}}),\r\n    posts: (channel, pageNumber)=> ({type: 'POSTS/GET', payload: {channel, pageNumber}}),\r\n    setFetching: (value)=> ({type: 'POSTS/SET/FETCHING', payload: {fetching: value}}),\r\n    setCurrentPostText: (value)=> ({type: 'POSTS/SET/CURRENT/POST/TEXT', payload: {currentPostText: value}}),\r\n    setIsButtonDisabled: (value)=> ({type: 'POSTS/SET/BUTTON/DISABLED', payload: {isButtonDisabled: value}}),\r\n    setImage: (value)=> ({type: 'POSTS/SET/IMAGE', payload: {image: value, isButtonDisabled: false}}),\r\n    setPosts: (value)=> ({type: 'POSTS/SET/', payload: { items: value }}),\r\n    setTotalCount: (value)=> ({type: 'POSTS/SET/TotalCount', payload: { totalItemsCount: value }}),\r\n    setCurrentPage: (value)=> ({type: 'POSTS/SET/CurrentPage', payload: { currentPage: value }}),\r\n    dublicate: (channel, message)=> ({type: 'POSTS/DUBLICATE', payload: { channel, message }}),\r\n    delete: (message)=> ({type: 'POSTS/DELETE', payload: { message}}),\r\n    trash: (message)=> ({type: 'POSTS/TRASH', payload: { message}}),\r\n    archive: (message)=> ({type: 'POSTS/ARCHIVE', payload: { message}}),\r\n    copyToArchive: (message)=> ({type: 'POSTS/ARCHIVE/COPY', payload: { message}}),\r\n    show: (id)=> ({type: 'POSTS/SHOW', payload: { id}}),\r\n    setCurrentPost: (value) => ({type: 'POSTS/SET/CURRENT', payload: { currentPost: value}})\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\posts\\sagas.js",["426","427","428","429","430","431","432","433","434","435"],"import { call, put, takeEvery, all, select } from 'redux-saga/effects'\r\nimport selectors from './selectors'\r\nimport { stopSubmit } from 'redux-form'\r\nimport actions from './actions'\r\nimport { postAPI } from '../../api/api'\r\n\r\nfunction* CreatePost({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const token = yield select(selectors.getToken)\r\n    const image = yield select(selectors.getImage)\r\n    var content = yield select(selectors.getContent)\r\n    content = content.replaceAll('<p>', '')\r\n    content = content.replaceAll('</p>', '')\r\n    content = content.replaceAll(/(<ul>\\n)/g, '')\r\n    content = content.replaceAll('</ul>\\n', '')\r\n    content = content.replaceAll('<li>', '- ')\r\n    content = content.replaceAll('</li>', '')\r\n    content = content.replaceAll(/<span[^>]*>/g, '')\r\n    content = content.replaceAll('</span>', '')\r\n    content = content.replaceAll('&nbsp', '')\r\n    content = content.replaceAll(/ style=\"[^\"]*\"/g, '')\r\n    content = content.replaceAll('</span>', '')\r\n    content = content.replaceAll('<p>', '')\r\n    const data = { token, content, channel: payload.channel, image, inArchive: payload.inArchieve }\r\n    try {\r\n        const result = yield call(postAPI.create, data)\r\n        yield put(actions.setCurrentPostText(''))\r\n        yield put(actions.setImage(null))\r\n        yield put(actions.setIsButtonDisabled(true))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* getPosts({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const token = yield select(selectors.getToken)\r\n    const pageSize = yield select(selectors.getPageSize)\r\n    const pageNumber = yield select(selectors.getCurrentPage)\r\n    try {\r\n        const result = yield call(postAPI.getPosts, {\r\n            token, channel: payload.channel, pageNumber, pageSize\r\n        })\r\n        yield put(actions.setPosts(result.posts))\r\n        yield put(actions.setTotalCount(result.amount))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* dublicate({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    try {\r\n        const result = yield call(postAPI.dublicate, {\r\n            message: payload.message, channel: payload.channel, token\r\n        })\r\n        yield put(actions.posts(payload.channel, page))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* deletePost({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.delete, {\r\n            message: payload.message, token\r\n        })\r\n        yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* show({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const token = yield select(selectors.getToken)\r\n    try {\r\n        const result = yield call(postAPI.show, {\r\n            id: payload.id, token\r\n        })\r\n       // console.log('post', result);\r\n        yield put(actions.setCurrentPost({...result.post, channelName: result.channelName}))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* trash({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.trash, {\r\n            message: payload.message, token\r\n        })\r\n        yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* archive({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.archive, {\r\n            message: payload.message, token\r\n        })\r\n        yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* copyToArchive({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.copyToArchive, {\r\n            message: payload.message, token\r\n        })\r\n        //yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nexport default function* () {\r\n    yield all([\r\n        takeEvery('POSTS/CREATE', CreatePost),\r\n        takeEvery('POSTS/GET', getPosts),\r\n        takeEvery('POSTS/DUBLICATE', dublicate),\r\n        takeEvery('POSTS/DELETE', deletePost),\r\n        takeEvery('POSTS/SHOW', show),\r\n        takeEvery('POSTS/TRASH', trash),\r\n        takeEvery('POSTS/ARCHIVE', archive),\r\n        takeEvery('POSTS/ARCHIVE/COPY', copyToArchive),\r\n    ])\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\auth\\selectors.js",["436"],"export default {\r\n    getFetching: state => state.auth.fetching,\r\n    getIsAuth: state => state.auth.isAuth,\r\n    getToken: state => state.auth.token,\r\n    getRefreshToken: state => state.auth.refreshToken,\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\auth\\actions.js",["437"],"export default {\r\n    setTokens: (token, refreshToken) => ({type: 'AUTH/SET/TOKEN', payload: {token, refreshToken, isAuth: true}}),\r\n    setFetching: (value) => ({type: 'AUTH/SET/FETCHING', payload:{fetching: value}}),\r\n    login: (email, password) => ({type: 'AUTH/LOGIN', payload:{email, password}}),\r\n    register: (email, password, nickName, passwordConfirm) => \r\n        ({type: 'AUTH/REGISTER', payload:{email, password, nickName, passwordConfirm}}),\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\auth\\reducer.js",["438","439"],"const initialState = {\r\n    fetching: false,\r\n    isAuth: false,\r\n    refreshToken: null,\r\n    token: null,\r\n    refreshToken: null\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n\r\n    case 'AUTH/SET/TOKEN':\r\n        return { ...state, ...payload }\r\n    case 'AUTH/SET/FETCHING':\r\n        return { ...state, ...payload }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\auth\\sagas.js",["440","441"],"import { call, put, takeEvery, all } from 'redux-saga/effects'\r\nimport selectors from './selectors'\r\nimport { stopSubmit } from 'redux-form'\r\nimport action from './actions'\r\nimport { authAPI } from '../../api/api'\r\n\r\nfunction* Login({ payload }) {\r\n    yield put(action.setFetching(true))\r\n    let result = null\r\n    try {\r\n        result = yield call(authAPI.login, payload)\r\n        if (result.ResultCode === 1) {\r\n            yield put(stopSubmit('login', { [result.field]: result.message }))\r\n        } else {\r\n            yield put(action.setTokens(result.token, result.refreshToken))\r\n        }\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(action.setFetching(false))\r\n}\r\nfunction* Register({ payload }) {\r\n    yield put(action.setFetching(true))\r\n    try {\r\n        const result = yield call(authAPI.register, payload)\r\n        if (result.ResultCode === 1) {\r\n            yield put(stopSubmit('register', { [result.field]: result.message }))\r\n        } else {\r\n            yield put(action.setTokens(result.token, result.refreshToken))\r\n            const res = yield call(authAPI.login, payload)\r\n            yield put(action.setTokens(res.token, res.refreshToken))\r\n        }\r\n    } catch (error) {\r\n\r\n    }\r\n\r\n    yield put(action.setFetching(false))\r\n}\r\n\r\n\r\nexport default function* () {\r\n    yield all([\r\n        takeEvery('AUTH/LOGIN', Login),\r\n        takeEvery('AUTH/REGISTER', Register),\r\n    ]);\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\channels\\selectors.js",["442"],"export default {\r\n    getToken: state => state.auth.token,\r\n    getCode: state => state.channels.code,\r\n    getFetching: state => state.channels.fetching,\r\n    getChannels: state => state.channels.channels,\r\n    getIsError: state => state.channels.isError,\r\n    getErrorMessage: state => state.channels.errorMessage,\r\n    getCurrentChannel: state => state.channels.currentChannel,\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\channels\\actions.js",["443"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\channels\\reducer.js",["444"],"const initialState = {\r\n    channels: [],\r\n    code: null,\r\n    fetching: false,\r\n    isError: false,\r\n    errorMessage: '',\r\n    currentChannel: null\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n\r\n        case \"CHANNELS/GENERATE/CODE\":\r\n            var result = '';\r\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n            var charactersLength = characters.length;\r\n            for (var i = 0; i < 5; i++) {\r\n                result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n            }\r\n            return { ...state, code: result }\r\n        case \"CHANNELS/SET/FETCHING\":\r\n            return { ...state, ...payload}\r\n        case \"CHANNELS/SET/CHANNELS\":\r\n            return { ...state, ...payload}\r\n        case \"CHANNELS/SET/ISERROR\":\r\n            return { ...state, ...payload}\r\n        case \"CHANNELS/SET/ERROR/MESSAGE\":\r\n            return { ...state, ...payload}\r\n        case \"CHANNELS/SET/CURRENT/CHANNEL\":\r\n            return { ...state, ...payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\channels\\sagas.js",["445","446","447","448"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\PostView\\PostCard\\SplitButton\\index.js",["449","450","451","452","453"],"import React from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuList from '@material-ui/core/MenuList'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport POSTS from '../../../../../../modules/posts'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Modal from '@material-ui/core/Modal'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst options = ['Переглянути', 'Повторно опублікувати', 'Перемістити в архів', 'Скопіювати в архів', 'Видалити']\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand()\r\n  const left = 50 + rand()\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    //border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  buttons: {\r\n    dispalay: \"flex\",\r\n    justifyContent: 'space-around'\r\n  }\r\n}))\r\n\r\n\r\nexport default function SplitButton(props) {\r\n  const classes = useStyles()\r\n  const { id } = useParams()\r\n  const dispatch = useDispatch()\r\n  let history = useHistory()\r\n\r\n  const [open, setOpen] = React.useState(false)\r\n  const anchorRef = React.useRef(null)\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1)\r\n\r\n  const [modalStyle] = React.useState(getModalStyle)\r\n  const [openModal, setOpenModal] = React.useState(false)\r\n  const [openModal2, setOpenModal2] = React.useState(false)\r\n  const handleOpenModal = () => {\r\n    setOpen(true)\r\n  }\r\n  const handleOpenModal2 = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setOpen(false)\r\n  }\r\n  const handleCloseModal2 = () => {\r\n    setOpen(false)\r\n  }\r\n  const confirmed = () => {\r\n    //dispatch(POSTS.delete(props.id))\r\n    dispatch(POSTS.trash(props.id))\r\n    setOpenModal(false)\r\n  }\r\n  const confirmed2 = () => {\r\n    //dispatch(POSTS.delete(props.id))\r\n    dispatch(POSTS.archive(props.id))\r\n    setOpenModal2(false)\r\n  }\r\n  const handleClick = (index) => {\r\n    switch (options[index]) {\r\n      case 'Повторно опублікувати': {\r\n        dispatch(POSTS.dublicate(id, props.id))\r\n        break\r\n      }\r\n      case 'Скопіювати в архів': {\r\n        dispatch(POSTS.copyToArchive(props.id))\r\n        break\r\n      }\r\n      case 'Перемістити в архів': {\r\n        setOpenModal2(true)\r\n        break\r\n      }\r\n      case 'Видалити': {\r\n        //dispatch(POSTS.delete(id, props.id))\r\n        setOpenModal(true)\r\n        break\r\n      }\r\n      case 'Переглянути': {\r\n        dispatch(POSTS.setCurrentPost(props.post))\r\n        history.push(`/post/${props.id}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleMenuItemClick = (event, index) => {\r\n    setSelectedIndex(index)\r\n    setOpen(false)\r\n    handleClick(index)\r\n  }\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen)\r\n  }\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return\r\n    }\r\n\r\n    setOpen(false)\r\n  }\r\n\r\n  return (\r\n    <Grid container direction=\"column\" alignItems=\"center\">\r\n      <Grid item xs={12}>\r\n        <ButtonGroup variant=\"default\" color=\"default\" ref={anchorRef} aria-label=\"split button\">\r\n          {/* <Button onClick={handleClick}>{options[selectedIndex]}</Button> */}\r\n          <IconButton\r\n            color=\"default\"\r\n            component=\"span\"\r\n            onClick={handleToggle}\r\n          >\r\n            <MoreVertIcon />\r\n          </IconButton >\r\n        </ButtonGroup>\r\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n          {({ TransitionProps, placement }) => (\r\n            <Grow\r\n              {...TransitionProps}\r\n              style={{\r\n                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n              }}\r\n            >\r\n              <Paper>\r\n                <ClickAwayListener onClickAway={handleClose}>\r\n                  <MenuList id=\"split-button-menu\">\r\n                    {options.map((option, index) => (\r\n                      <MenuItem\r\n                        key={option}\r\n                        onClick={\r\n                          (event) => {\r\n                            handleMenuItemClick(event, index)\r\n                          }\r\n                        }\r\n                      >\r\n                        {option}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </MenuList>\r\n                </ClickAwayListener>\r\n              </Paper>\r\n            </Grow>\r\n          )}\r\n        </Popper>\r\n      </Grid>\r\n      <Modal\r\n        open={openModal}\r\n        onClose={handleCloseModal}\r\n      >\r\n        <div style={modalStyle} className={classes.paper}>\r\n          <h2 id=\"simple-modal-title\">Ви впевнені що хочете видалити пост?</h2>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs>\r\n              <Grid item xs={3}>\r\n                <Paper>   </Paper>\r\n              </Grid>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={confirmed}>\r\n                Так\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Button variant=\"contained\" color=\"secondary\" onClick={() => setOpenModal(false)}>\r\n                Ні\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        open={openModal2}\r\n        onClose={handleCloseModal2}\r\n      >\r\n        <div style={modalStyle} className={classes.paper}>\r\n          <h2 id=\"simple-modal-title\">При переміщенні посту в архів він буде видалений з каналу. Ви впевнені що хочете перемістити пост?</h2>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs>\r\n              <Grid item xs={3}>\r\n                <Paper>   </Paper>\r\n              </Grid>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={confirmed2}>\r\n                Так\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Button variant=\"contained\" color=\"secondary\" onClick={() => setOpenModal2(false)}>\r\n                Ні\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Modal>\r\n    </Grid>\r\n  )\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\PostPage\\index.js",["454","455","456","457"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Statistic\\index.js",["458"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\statistic\\index.js",["459"],"import sagas from './sagas'\r\nimport selectors from './selectors'\r\nimport reducer from './reducer'\r\nimport actions from './actions'\r\n\r\nexport {\r\n    reducer, sagas\r\n}\r\n\r\nexport default {\r\n    ...selectors, ...actions\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\statistic\\sagas.js",["460"],"import { call, put, takeEvery, all, select } from 'redux-saga/effects'\r\nimport actions from './actions'\r\nimport { channelAPI } from '../../api/api'\r\nimport selectors from './selectors'\r\n\r\nfunction* LoadStatistic({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(channelAPI.statistic, { token, channel })\r\n        yield put(actions.setStatistic(result.statistic))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\n\r\nexport default function* () {\r\n    yield all([\r\n        takeEvery('STATISTIC/LOAD', LoadStatistic),\r\n    ]);\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\statistic\\selectors.js",["461"],"export default {\r\n    getFetching: (state) => state.statistic.fetching,\r\n    getData: (state) => state.statistic.data,\r\n    getPostAmount: (state) => state.statistic.postAmount,\r\n    getToken: (state) => state.auth.token,\r\n    getCurrentChannel: (state) => state.channels.currentChannel,\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\statistic\\actions.js",["462"],"export default {\r\n    load: () => ({ type: 'STATISTIC/LOAD', payload: {}}),\r\n    setFetching: (value) => ({ type: 'STATISTIC/SET/FETCHING', payload: {fetching: value}}),\r\n    setStatistic: (statistic) => (\r\n        { \r\n            type: 'STATISTIC/SET/DATA', \r\n            payload: { ...statistic }\r\n        }\r\n    ),\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\statistic\\reducer.js",["463"],"const initialState = {\r\n    data: null,\r\n    postAmount: 0,\r\n    fetching: false,\r\n    amounOfSubscribers: 0,\r\n    avgPostInMonth: 0,\r\n    dateOfTheFirstPost: 0, \r\n    dateOfTheLastPost: 0, \r\n    postsCurrentYearData: [], \r\n    postsEveryDayData: [], \r\n    archiveAmount: 0,\r\n    trashAmount: 0,\r\n    amounOfDefaultPosts: 0,\r\n    amounOfQuizPosts: 0,\r\n    postsLastMonthData: []\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n\r\n    case 'STATISTIC/SET/FETCHING':\r\n        return { ...state, ...payload }\r\n    case 'STATISTIC/SET/DATA':\r\n        return { ...state, ...payload }\r\n\r\n    default:\r\n        return state\r\n    }\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\PostTabs\\index.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\index.js",["464"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Posts\\index.js",["465","466"],"import React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport PostsView from '../PostView/PostView'\r\nimport PostsReducer from '../../../../modules/posts'\r\nimport Loader from '../../../common/Loader/Loader'\r\nconst Posts = (props) => {\r\n    const id = useSelector(PostsReducer.getCurrentChannel)\r\n    const dispatch = useDispatch()\r\n    const DATA = useSelector(PostsReducer.getPosts)\r\n    const currentPage = useSelector(PostsReducer.getCurrentPage)\r\n    const totalItemsCount = useSelector(PostsReducer.getTotalItemsCount)\r\n    const pageSize = useSelector(PostsReducer.getPageSize)\r\n    const fetching = useSelector(PostsReducer.getFetching)\r\n    useEffect(() => {\r\n        dispatch(PostsReducer.posts(id))\r\n    }, [])\r\n    const paginateHandleCreate = () => {\r\n        return (page) => {\r\n            dispatch(PostsReducer.setCurrentPage(page))\r\n            dispatch(PostsReducer.posts(id))\r\n        }\r\n    }\r\n    const paginateHandle = paginateHandleCreate()\r\n    return (\r\n        <div>\r\n            {fetching && <Loader></Loader>}\r\n            <div>\r\n                {fetching && <Loader></Loader>}\r\n                <PostsView\r\n                    data={DATA}\r\n                    page={currentPage}\r\n                    totalCount={totalItemsCount}\r\n                    pageSize={pageSize}\r\n                    paginateHandle={paginateHandle}\r\n                ></PostsView>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Posts","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\CreatePost\\index.js",["467","468","469"],"import React, { useState, createRef } from 'react'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport { EditorState, convertToRaw, ContentState } from 'draft-js'\r\nimport draftToHtml from 'draftjs-to-html'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport htmlToDraft from 'html-to-draftjs'\r\nimport Button from '@material-ui/core/Button'\r\nimport posts from '../../../../modules/posts'\r\nimport Loader from '../../../common/Loader/Loader'\r\nimport { Box } from '@material-ui/core'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nconst CreatePost = (props) => {\r\n    const dispatch = useDispatch()\r\n    const isButtonDisabled = useSelector(posts.getIsButtonDisabled)\r\n    const channels = useSelector(posts.getChannels)\r\n    const photo = useSelector(state => state.posts.image)\r\n    const currentPostText = useSelector(posts.getContent)\r\n    const fetching = useSelector(posts.getFetching)\r\n    const inputFile = createRef()\r\n    const [editorState, setEditorState] = useState(EditorState.createWithContent(ContentState.createFromBlockArray(htmlToDraft(currentPostText).contentBlocks)))\r\n    const onEditorStateChange = (content) => {\r\n        setEditorState(content)\r\n    }\r\n    const onContentStateChange = (content) => {\r\n        dispatch(posts.setCurrentPostText(draftToHtml(content)))\r\n    }\r\n    const clickHandle = async () => {\r\n        var html = currentPostText\r\n        html = html.replace(/<style([\\s\\S]*?)<\\/style>/gi, '');\r\n        html = html.replace(/<script([\\s\\S]*?)<\\/script>/gi, '');\r\n        html = html.replace(/<\\/div>/ig, '\\n');\r\n        html = html.replace(/<\\/li>/ig, '\\n');\r\n        html = html.replace(/<li>/ig, '  *  ');\r\n        html = html.replace(/<\\/ul>/ig, '\\n');\r\n        html = html.replace(/<\\/p>/ig, '\\n');\r\n        html = html.replace(/<br\\s*[\\/]?>/gi, \"\\n\");\r\n        html = html.replace(/<[^>]+>/ig, '');\r\n        if (photo && html.length > 1024) {\r\n            alert('Повідомлення занадто велике')\r\n            return\r\n        }\r\n        const channel = channels.filter(el => el._id === props.channel_id)\r\n        dispatch(posts.createPost(channel[0], false))\r\n        setEditorState(EditorState.createEmpty())\r\n        inputFile.current.value = null\r\n    }\r\n    const clickHandleInArchieve = async () => {\r\n        var html = currentPostText\r\n        html = html.replace(/<style([\\s\\S]*?)<\\/style>/gi, '');\r\n        html = html.replace(/<script([\\s\\S]*?)<\\/script>/gi, '');\r\n        html = html.replace(/<\\/div>/ig, '\\n');\r\n        html = html.replace(/<\\/li>/ig, '\\n');\r\n        html = html.replace(/<li>/ig, '  *  ');\r\n        html = html.replace(/<\\/ul>/ig, '\\n');\r\n        html = html.replace(/<\\/p>/ig, '\\n');\r\n        html = html.replace(/<br\\s*[\\/]?>/gi, \"\\n\");\r\n        html = html.replace(/<[^>]+>/ig, '');\r\n        if (photo && html.length > 1024) {\r\n            alert('Повідомлення занадто велике')\r\n            return\r\n        }\r\n        const channel = channels.filter(el => el._id === props.channel_id)\r\n        dispatch(posts.createPost(channel[0], true))\r\n        setEditorState(EditorState.createEmpty())\r\n        inputFile.current.value = null\r\n    }\r\n    const onChangeFileHandler = (event) => {\r\n        dispatch(posts.setImage(event.target.files[0]))\r\n    }\r\n    return (\r\n        <div >\r\n            {fetching && <Loader></Loader>}\r\n            <Editor\r\n                editorState={editorState}\r\n                onEditorStateChange={onEditorStateChange}\r\n                onContentStateChange={onContentStateChange}\r\n                toolbar={{\r\n                    options: [\r\n                        'inline', 'list', 'link',\r\n                        'emoji', 'remove', 'history'\r\n                    ],\r\n                    inline: {\r\n                        options: ['bold', 'italic', 'underline', 'strikethrough', 'monospace'],\r\n                    },\r\n                    list: {\r\n                        options: ['unordered'],\r\n                    }\r\n                }}\r\n            />\r\n            <form id=\"uploadForm\" enctype=\"multipart/form-data\" className=\"mb-1\">\r\n                <input accept=\"image/*\" type='file' name='postsImage' onChange={onChangeFileHandler} ref={inputFile} />\r\n            </form>\r\n            {/* <div className=\"d-flex flex-sm-row flex-column justify-content-center\">\r\n                <Box mr={2}>\r\n                    <Button variant=\"contained\" color=\"primary\" disabled={isButtonDisabled} onClick={clickHandle}>\r\n                        Опублікувати\r\n                </Button>\r\n                </Box>\r\n                <Button variant=\"contained\" color=\"primary\" disabled={isButtonDisabled} onClick={clickHandleInArchieve}>\r\n                    Додати в архів\r\n                </Button>\r\n            </div> */}\r\n            <Grid container spacing={3} direction=\"row\" justify=\"center\">\r\n\r\n                <Box mx={2} mt={2} my={1}>\r\n                    <Button variant=\"contained\" color=\"primary\" disabled={isButtonDisabled} onClick={clickHandle}>\r\n                        Опублікувати\r\n                </Button>\r\n                </Box>\r\n                <Box mx={2} my={1}>\r\n                <Button item variant=\"contained\" color=\"primary\" disabled={isButtonDisabled} onClick={clickHandleInArchieve}>\r\n                    Додати в архів\r\n                    </Button>\r\n                    </Box>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePost","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\index.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Creation\\index.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\archive\\index.js",["470"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\archive\\reducer.js",["471"],"const initialState = {\r\n    items: [],\r\n    currentPage: 1,\r\n    totalItemsCount: 1,\r\n    pageSize: 9,\r\n    fetching: false,\r\n    currentPost: null\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case 'ARCHIVE/SET/FETCHING':\r\n        case 'ARCHIVE/SET/':\r\n        case 'ARCHIVE/SET/TotalCount':\r\n        case 'ARCHIVE/SET/CurrentPage':\r\n        case 'ARCHIVE/SET/CURRENT':\r\n            return { ...state, ...payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\archive\\actions.js",["472"],"export default {\r\n    posts: (channel, pageNumber) => ({type: 'ARCHIVE/GET', payload: {channel, pageNumber}}),\r\n    setFetching: (value) => ({type: 'ARCHIVE/SET/FETCHING', payload: {fetching: value}}),\r\n    setPosts: (value) => ({type: 'ARCHIVE/SET/', payload: { items: value }}),\r\n    setTotalCount: (value) => ({type: 'ARCHIVE/SET/TotalCount', payload: { totalItemsCount: value }}),\r\n    setCurrentPage: (value) => ({type: 'ARCHIVE/SET/CurrentPage', payload: { currentPage: value }}),\r\n    setCurrentPost: (value) => ({type: 'ARCHIVE/SET/CURRENT', payload: { currentPost: value}}),\r\n    delete: (message) => ({type: 'ARCHIVE/DELETE', payload: { message }}),\r\n    trash: (message)=> ({type: 'ARCHIVE/TRASH', payload: { message}}),\r\n    unarchive: (message)=> ({type: 'ARCHIVE/UNARCHIVE', payload: { message}}),\r\n    copyAndUnarchive: (message)=> ({type: 'ARCHIVE/UNARCHIVE/COPY', payload: { message}}),\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\archive\\selectors.js",["473"],"export default {\r\n    getToken: (state) => state.auth.token,\r\n    getChannels: (state) => state.channels.channels,\r\n    getFetching: (state) => state.archive.fetching,\r\n    getPosts: (state) => state.archive.items,\r\n    getCurrentPage: (state) => state.archive.currentPage,\r\n    getTotalItemsCount: (state) => state.archive.totalItemsCount,\r\n    getPageSize: (state) => state.archive.pageSize,\r\n    getCurrentChannel: (state) => state.channels.currentChannel,\r\n    getCurrentPost: (state) => state.archive.currentPost,\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\archive\\sagas.js",["474","475","476","477","478","479","480","481"],"import { call, put, takeEvery, all, select } from 'redux-saga/effects'\r\nimport selectors from './selectors'\r\nimport { stopSubmit } from 'redux-form'\r\nimport actions from './actions'\r\nimport { postAPI } from '../../api/api'\r\n\r\nfunction* getPosts({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const token = yield select(selectors.getToken)\r\n    const pageSize = yield select(selectors.getPageSize)\r\n    const pageNumber = yield select(selectors.getCurrentPage)\r\n    try {\r\n        const result = yield call(postAPI.getPostsInArchive, {\r\n            token, channel: payload.channel, pageNumber, pageSize\r\n        })\r\n        yield put(actions.setPosts(result.posts))\r\n        yield put(actions.setTotalCount(result.amount))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* deletePost({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.delete, {\r\n            message: payload.message, token\r\n        })\r\n        yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* trash({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.trash, {\r\n            message: payload.message, token\r\n        })\r\n        yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* unarchive({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.unarchive, {\r\n            message: payload.message, token\r\n        })\r\n        yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* copyAndUnarchive({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.copyAndUnarchive, {\r\n            message: payload.message, token\r\n        })\r\n        //yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nexport default function* () {\r\n    yield all([\r\n        takeEvery('ARCHIVE/GET', getPosts),\r\n        takeEvery('ARCHIVE/DELETE', deletePost),\r\n        takeEvery('ARCHIVE/TRASH', trash),\r\n        takeEvery('ARCHIVE/UNARCHIVE', unarchive),\r\n        takeEvery('ARCHIVE/UNARCHIVE/COPY', copyAndUnarchive),\r\n    ])\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Archive\\index.js",["482","483"],"import React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport PostsView from './PostView/PostView'\r\nimport ArchiveStore from '../../../../modules/archive'\r\nimport Loader from '../../../common/Loader/Loader'\r\n\r\nconst Posts = (props) => {\r\n    const id = useSelector(ArchiveStore.getCurrentChannel)\r\n    const dispatch = useDispatch()\r\n    const DATA = useSelector(ArchiveStore.getPosts)\r\n    const currentPage = useSelector(ArchiveStore.getCurrentPage)\r\n    const totalItemsCount = useSelector(ArchiveStore.getTotalItemsCount)\r\n    const pageSize = useSelector(ArchiveStore.getPageSize)\r\n    const fetching = useSelector(ArchiveStore.getFetching)\r\n    useEffect(() => {\r\n        dispatch(ArchiveStore.posts(id))\r\n    }, [])\r\n    const paginateHandleCreate = () => {\r\n        return (page) => {\r\n            dispatch(ArchiveStore.setCurrentPage(page))\r\n            dispatch(ArchiveStore.posts(id))\r\n        }\r\n    }\r\n    const paginateHandle = paginateHandleCreate()\r\n\r\n    return (\r\n        <div>\r\n            {fetching && <Loader></Loader>}\r\n            <div>\r\n                {fetching && <Loader/>}\r\n                <PostsView\r\n                    data={DATA}\r\n                    page={currentPage}\r\n                    totalCount={totalItemsCount}\r\n                    pageSize={pageSize}\r\n                    paginateHandle={paginateHandle}\r\n                ></PostsView>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Posts","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Archive\\PostView\\PostView.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Archive\\PostView\\PostCard\\PostCard.js",["484","485","486","487","488","489","490","491","492","493","494","495","496"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport clsx from 'clsx'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { primary } from '@material-ui/core/colors'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport ShareIcon from '@material-ui/icons/Share'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport { Tab } from '@material-ui/core/Tab'\r\nimport SplitButton from './SplitButton'\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 260, //345\r\n    height: '100%',\r\n    margin: 'auto',\r\n  },\r\n  media: {\r\n    height: 150// 200\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  avatar: {\r\n    backgroundColor: theme.palette.primary.main\r\n  },\r\n}))\r\nconst makeContent = (value) => {\r\n  if (value.length >= 100 || (value.match(new RegExp(\"\\n\", \"g\")) || []).length >= 2) {\r\n    if (value.length >= 100) {\r\n      return value.replaceAll('\\n', '<br>').substring(0, 100) + \"...\"\r\n    }\r\n    if ((value.match(new RegExp(\"\\n\", \"g\")) || []).length >= 2) {\r\n      const arr = value.replaceAll('\\n', '<br>').split('<br>')\r\n      return arr[0] + '<br>' + arr[1] + \"...\"\r\n    }\r\n  } else {\r\n    return value.replaceAll('\\n', '<br>')\r\n  }\r\n}\r\nconst makeContentQuiz = (value) => {\r\n  const content = JSON.parse(value)\r\n  if (content.question.length >= 100) {\r\n    return content.question.substring(0, 100) + \"...\"\r\n  } else {\r\n    return content.question\r\n  }\r\n}\r\nfunction PostCard(props) {\r\n  const classes = useStyles()\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        // avatar={\r\n        //   <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n        //     T\r\n        //   </Avatar>\r\n        // }\r\n        action={\r\n          <SplitButton id={props.id} post={props.el} />\r\n        }\r\n        //title={}\r\n        subheader={\r\n          <div>\r\n            <Typography gutterBottom variant=\"p\" component=\"p\">\r\n              {props.subheader}\r\n            </Typography>\r\n            <Typography gutterBottom variant=\"p\" component=\"p\">\r\n              {props.type === \"default\" ? \"Пост\" : \"Опитування\"}\r\n            </Typography>\r\n          </div>\r\n        }\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={props.image}\r\n        component=\"img\"\r\n      //title=\"Paella dish\"\r\n      />\r\n      {/* <img src=\"http://localhost:5000/uploads/16132302542147piGl5w3LVIhcnTsUM6JRLJp4amTY9WUh6GeryYm.jpeg\" className={classes.media} ></img> */}\r\n      <CardContent>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          <td dangerouslySetInnerHTML={{\r\n            __html: props.type === \"default\" ? makeContent(props.content) : makeContentQuiz(props.content)\r\n          }} />\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\nexport default PostCard","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Archive\\PostView\\PostCard\\SplitButton\\index.js",["497","498","499","500"],"import React from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuList from '@material-ui/core/MenuList'\r\nimport { useDispatch } from 'react-redux'\r\nimport ArchiveStore from '../../../../../../../modules/archive'\r\nimport PostsStore from '../../../../../../../modules/posts'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Modal from '@material-ui/core/Modal'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst options = ['Переглянути', 'Опублікувати', 'Скопіювати та опублікувати', 'Видалити']\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand()\r\n  const left = 50 + rand()\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  buttons: {\r\n    dispalay: \"flex\",\r\n    justifyContent: 'space-around'\r\n  }\r\n}))\r\n\r\n\r\nexport default function SplitButton(props) {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  let history = useHistory()\r\n  const [open, setOpen] = React.useState(false)\r\n  const anchorRef = React.useRef(null)\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1)\r\n\r\n  const [modalStyle] = React.useState(getModalStyle)\r\n  const [openModal, setOpenModal] = React.useState(false)\r\n  const handleOpenModal = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setOpen(false)\r\n  }\r\n  const confirmed = () => {\r\n    //dispatch(ArchiveStore.delete(props.id))\r\n    dispatch(ArchiveStore.trash(props.id))\r\n    setOpenModal(false)\r\n  }\r\n  const handleClick = (index) => {\r\n    switch (options[index]) {\r\n      case 'Опублікувати': {\r\n        dispatch(ArchiveStore.unarchive(props.id))\r\n        break\r\n      }\r\n      case 'Скопіювати та опублікувати': {\r\n        dispatch(ArchiveStore.copyAndUnarchive(props.id))\r\n        break\r\n      }\r\n      case 'Видалити': {\r\n        setOpenModal(true)\r\n        break\r\n      }\r\n      case 'Переглянути': {\r\n        dispatch(PostsStore.setCurrentPost(props.post))\r\n        history.push(`/post/${props.id}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleMenuItemClick = (event, index) => {\r\n    setSelectedIndex(index)\r\n    setOpen(false)\r\n    handleClick(index)\r\n  }\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen)\r\n  }\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return\r\n    }\r\n\r\n    setOpen(false)\r\n  }\r\n\r\n  return (\r\n    <Grid container direction=\"column\" alignItems=\"center\">\r\n      <Grid item xs={12}>\r\n        <ButtonGroup variant=\"default\" color=\"default\" ref={anchorRef} aria-label=\"split button\">\r\n          {/* <Button onClick={handleClick}>{options[selectedIndex]}</Button> */}\r\n          <IconButton\r\n            color=\"default\"\r\n            component=\"span\"\r\n            onClick={handleToggle}\r\n          >\r\n            <MoreVertIcon />\r\n          </IconButton >\r\n        </ButtonGroup>\r\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n          {({ TransitionProps, placement }) => (\r\n            <Grow\r\n              {...TransitionProps}\r\n              style={{\r\n                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n              }}\r\n            >\r\n              <Paper>\r\n                <ClickAwayListener onClickAway={handleClose}>\r\n                  <MenuList id=\"split-button-menu\">\r\n                    {options.map((option, index) => (\r\n                      <MenuItem\r\n                        key={option}\r\n                        onClick={\r\n                          (event) => {\r\n                            handleMenuItemClick(event, index)\r\n                          }\r\n                        }\r\n                      >\r\n                        {option}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </MenuList>\r\n                </ClickAwayListener>\r\n              </Paper>\r\n            </Grow>\r\n          )}\r\n        </Popper>\r\n      </Grid>\r\n      <Modal\r\n        open={openModal}\r\n        onClose={handleCloseModal}\r\n      >\r\n        <div style={modalStyle} className={classes.paper}>\r\n          <h2 id=\"simple-modal-title\">Ви впевнені що хочете видалити пост?</h2>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs>\r\n              <Grid item xs={3}>\r\n                <Paper>   </Paper>\r\n              </Grid>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={confirmed}>\r\n                Так\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Button variant=\"contained\" color=\"secondary\" onClick={() => setOpenModal(false)}>\r\n                Ні\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Modal>\r\n    </Grid>\r\n  )\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\trash\\index.js",["501"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\trash\\sagas.js",["502","503","504","505","506"],"import { call, put, takeEvery, all, select } from 'redux-saga/effects'\r\nimport selectors from './selectors'\r\nimport { stopSubmit } from 'redux-form'\r\nimport actions from './actions'\r\nimport { postAPI } from '../../api/api'\r\n\r\nfunction* getPosts({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const token = yield select(selectors.getToken)\r\n    const pageSize = yield select(selectors.getPageSize)\r\n    const pageNumber = yield select(selectors.getCurrentPage)\r\n    try {\r\n        const result = yield call(postAPI.getPostsInTrash, {\r\n            token, channel: payload.channel, pageNumber, pageSize\r\n        })\r\n        yield put(actions.setPosts(result.posts))\r\n        yield put(actions.setTotalCount(result.amount))\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* deletePost({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.delete, {\r\n            message: payload.message, token\r\n        })\r\n        yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* backToArchive({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.untrash, {\r\n            message: payload.message, token, flag: true\r\n        })\r\n        yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\nfunction* backToPublished({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n    const page = yield select(selectors.getCurrentPage)\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    try {\r\n        const result = yield call(postAPI.untrash, {\r\n            message: payload.message, token, flag: false\r\n        })\r\n        yield put(actions.posts(channel, page))\r\n    } catch (error) {\r\n        alert(error.message)\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\n\r\nexport default function* () {\r\n    yield all([\r\n        takeEvery('TRASH/GET', getPosts),\r\n        takeEvery('TRASH/DELETE', deletePost),\r\n        takeEvery('TRASH/BACK_TO_PUBLISHED', backToArchive),\r\n        takeEvery('TRASH/BACK_TO_ARCHIVE', backToPublished),\r\n    ])\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\trash\\reducer.js",["507"],"const initialState = {\r\n    items: [],\r\n    currentPage: 1,\r\n    totalItemsCount: 1,\r\n    pageSize: 9,\r\n    fetching: false,\r\n    currentPost: null\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case 'TRASH/SET/FETCHING':\r\n        case 'TRASH/SET/':\r\n        case 'TRASH/SET/TotalCount':\r\n        case 'TRASH/SET/CurrentPage':\r\n        case 'TRASH/SET/CURRENT':\r\n            return { ...state, ...payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\trash\\actions.js",["508"],"export default {\r\n    posts: (channel, pageNumber) => ({type: 'TRASH/GET', payload: {channel, pageNumber}}),\r\n    setFetching: (value) => ({type: 'TRASH/SET/FETCHING', payload: {fetching: value}}),\r\n    setPosts: (value) => ({type: 'TRASH/SET/', payload: { items: value }}),\r\n    setTotalCount: (value) => ({type: 'TRASH/SET/TotalCount', payload: { totalItemsCount: value }}),\r\n    setCurrentPage: (value) => ({type: 'TRASH/SET/CurrentPage', payload: { currentPage: value }}),\r\n    setCurrentPost: (value) => ({type: 'TRASH/SET/CURRENT', payload: { currentPost: value}}),\r\n    delete: (message) => ({type: 'TRASH/DELETE', payload: { message }}),\r\n    backToArchive: (message) => ({type: 'TRASH/BACK_TO_PUBLISHED', payload: { message }}),\r\n    backToPublished: (message) => ({type: 'TRASH/BACK_TO_ARCHIVE', payload: { message }}),\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\trash\\selectors.js",["509"],"export default {\r\n    getToken: (state) => state.auth.token,\r\n    getChannels: (state) => state.channels.channels,\r\n    getFetching: (state) => state.trash.fetching,\r\n    getPosts: (state) => state.trash.items,\r\n    getCurrentPage: (state) => state.trash.currentPage,\r\n    getTotalItemsCount: (state) => state.trash.totalItemsCount,\r\n    getPageSize: (state) => state.trash.pageSize,\r\n    getCurrentChannel: (state) => state.channels.currentChannel,\r\n    getCurrentPost: (state) => state.trash.currentPost,\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Trash\\index.js",["510","511"],"import React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport PostsView from './PostView/PostView'\r\nimport TrashStore from '../../../../modules/trash'\r\nimport Loader from '../../../common/Loader/Loader'\r\n\r\nconst Posts = (props) => {\r\n    const id = useSelector(TrashStore.getCurrentChannel)\r\n    const dispatch = useDispatch()\r\n    const DATA = useSelector(TrashStore.getPosts)\r\n    const currentPage = useSelector(TrashStore.getCurrentPage)\r\n    const totalItemsCount = useSelector(TrashStore.getTotalItemsCount)\r\n    const pageSize = useSelector(TrashStore.getPageSize)\r\n    const fetching = useSelector(TrashStore.getFetching)\r\n    useEffect(() => {\r\n        dispatch(TrashStore.posts(id))\r\n    }, [])\r\n    const paginateHandleCreate = () => {\r\n        return (page) => {\r\n            dispatch(TrashStore.setCurrentPage(page))\r\n            dispatch(TrashStore.posts(id))\r\n        }\r\n    }\r\n    const paginateHandle = paginateHandleCreate()\r\n\r\n    return (\r\n        <div>\r\n            {fetching && <Loader></Loader>}\r\n            <div>\r\n                {fetching && <Loader/>}\r\n                <PostsView\r\n                    data={DATA}\r\n                    page={currentPage}\r\n                    totalCount={totalItemsCount}\r\n                    pageSize={pageSize}\r\n                    paginateHandle={paginateHandle}\r\n                ></PostsView>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Posts","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Trash\\PostView\\PostView.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Trash\\PostView\\PostCard\\PostCard.js",["512","513","514","515","516","517","518","519","520","521","522","523","524"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport clsx from 'clsx'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { primary } from '@material-ui/core/colors'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite'\r\nimport ShareIcon from '@material-ui/icons/Share'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport { Tab } from '@material-ui/core/Tab'\r\nimport SplitButton from './SplitButton'\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    maxWidth: 260, //345\r\n    height: '100%',\r\n    margin: 'auto',\r\n  },\r\n  media: {\r\n    height: 150// 200\r\n  },\r\n  expand: {\r\n    transform: 'rotate(0deg)',\r\n    marginLeft: 'auto',\r\n    transition: theme.transitions.create('transform', {\r\n      duration: theme.transitions.duration.shortest,\r\n    }),\r\n  },\r\n  expandOpen: {\r\n    transform: 'rotate(180deg)',\r\n  },\r\n  avatar: {\r\n    backgroundColor: theme.palette.primary.main\r\n  },\r\n}))\r\nconst makeContent = (value) => {\r\n  if (value.length >= 100 || (value.match(new RegExp(\"\\n\", \"g\")) || []).length >= 2) {\r\n    if(value.length >= 100){\r\n      return value.replaceAll('\\n', '<br>').substring(0, 100) + \"...\"\r\n    }\r\n    if ((value.match(new RegExp(\"\\n\", \"g\")) || []).length >= 2) {\r\n      const arr = value.replaceAll('\\n', '<br>').split('<br>')\r\n      return arr[0] + '<br>' + arr[1] + \"...\"\r\n    }\r\n  } else {\r\n    return value.replaceAll('\\n', '<br>')\r\n  }\r\n}\r\nconst makeContentQuiz = (value) => {\r\n  const content = JSON.parse(value)\r\n  if (content.question.length >= 100) {\r\n    return content.question.substring(0, 100) + \"...\"\r\n  } else {\r\n    return content.question\r\n  }\r\n}\r\nfunction PostCard(props) {\r\n  const classes = useStyles()\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardHeader\r\n        // avatar={\r\n        //   <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n        //     T\r\n        //   </Avatar>\r\n        // }\r\n        action={\r\n          <SplitButton id={props.id} post={props.el} />\r\n        }\r\n        //title={}\r\n        subheader={\r\n          <div>\r\n            <Typography gutterBottom variant=\"p\" component=\"p\">\r\n              {props.subheader}\r\n            </Typography>\r\n            <Typography gutterBottom variant=\"p\" component=\"p\">\r\n              {props.type === \"default\" ? \"Пост\" : \"Опитування\"}\r\n            </Typography>\r\n          </div>\r\n        }\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image={props.image}\r\n        component=\"img\"\r\n      //title=\"Paella dish\"\r\n      />\r\n      {/* <img src=\"http://localhost:5000/uploads/16132302542147piGl5w3LVIhcnTsUM6JRLJp4amTY9WUh6GeryYm.jpeg\" className={classes.media} ></img> */}\r\n      <CardContent>\r\n        <Typography variant=\"body2\" component=\"p\">\r\n          <td dangerouslySetInnerHTML={{\r\n            __html: props.type === \"default\" ? makeContent(props.content) : makeContentQuiz(props.content)\r\n          }} />\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  )\r\n}\r\nexport default PostCard","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\Trash\\PostView\\PostCard\\SplitButton\\index.js",["525","526","527","528"],"import React from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert'\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener'\r\nimport Grow from '@material-ui/core/Grow'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Popper from '@material-ui/core/Popper'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuList from '@material-ui/core/MenuList'\r\nimport { useDispatch } from 'react-redux'\r\nimport TrashStore from '../../../../../../../modules/trash'\r\nimport PostsStore from '../../../../../../../modules/posts'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Modal from '@material-ui/core/Modal'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst options = ['Переглянути', 'Опублікувати', 'Повернути в архів', 'Видалити']\r\n\r\nfunction rand() {\r\n  return Math.round(Math.random() * 20) - 10\r\n}\r\n\r\nfunction getModalStyle() {\r\n  const top = 50 + rand()\r\n  const left = 50 + rand()\r\n\r\n  return {\r\n    top: `${top}%`,\r\n    left: `${left}%`,\r\n    transform: `translate(-${top}%, -${left}%)`,\r\n  }\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: 'absolute',\r\n    width: 400,\r\n    backgroundColor: theme.palette.background.paper,\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  buttons: {\r\n    dispalay: \"flex\",\r\n    justifyContent: 'space-around'\r\n  }\r\n}))\r\n\r\n\r\nexport default function SplitButton(props) {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  let history = useHistory()\r\n  const [open, setOpen] = React.useState(false)\r\n  const anchorRef = React.useRef(null)\r\n  const [selectedIndex, setSelectedIndex] = React.useState(1)\r\n\r\n  const [modalStyle] = React.useState(getModalStyle)\r\n  const [openModal, setOpenModal] = React.useState(false)\r\n  const handleOpenModal = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleCloseModal = () => {\r\n    setOpen(false)\r\n  }\r\n  const confirmed = () => {\r\n    //dispatch(TrashStore.delete(props.id))\r\n    dispatch(TrashStore.delete(props.id))\r\n    setOpenModal(false)\r\n  }\r\n  const handleClick = (index) => {\r\n    switch (options[index]) {\r\n      case 'Опублікувати': {\r\n        dispatch(TrashStore.backToPublished(props.id))\r\n        break\r\n      }\r\n      case 'Повернути в архів': {\r\n        dispatch(TrashStore.backToArchive(props.id))\r\n        break\r\n      }\r\n      case 'Видалити': {\r\n        setOpenModal(true)\r\n        break\r\n      }\r\n      case 'Переглянути': {\r\n        dispatch(PostsStore.setCurrentPost(props.post))\r\n        history.push(`/post/${props.id}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  const handleMenuItemClick = (event, index) => {\r\n    setSelectedIndex(index)\r\n    setOpen(false)\r\n    handleClick(index)\r\n  }\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen)\r\n  }\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return\r\n    }\r\n\r\n    setOpen(false)\r\n  }\r\n\r\n  return (\r\n    <Grid container direction=\"column\" alignItems=\"center\">\r\n      <Grid item xs={12}>\r\n        <ButtonGroup variant=\"default\" color=\"default\" ref={anchorRef} aria-label=\"split button\">\r\n          {/* <Button onClick={handleClick}>{options[selectedIndex]}</Button> */}\r\n          <IconButton\r\n            color=\"default\"\r\n            component=\"span\"\r\n            onClick={handleToggle}\r\n          >\r\n            <MoreVertIcon />\r\n          </IconButton >\r\n        </ButtonGroup>\r\n        <Popper open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n          {({ TransitionProps, placement }) => (\r\n            <Grow\r\n              {...TransitionProps}\r\n              style={{\r\n                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n              }}\r\n            >\r\n              <Paper>\r\n                <ClickAwayListener onClickAway={handleClose}>\r\n                  <MenuList id=\"split-button-menu\">\r\n                    {options.map((option, index) => (\r\n                      <MenuItem\r\n                        key={option}\r\n                        onClick={\r\n                          (event) => {\r\n                            handleMenuItemClick(event, index)\r\n                          }\r\n                        }\r\n                      >\r\n                        {option}\r\n                      </MenuItem>\r\n                    ))}\r\n                  </MenuList>\r\n                </ClickAwayListener>\r\n              </Paper>\r\n            </Grow>\r\n          )}\r\n        </Popper>\r\n      </Grid>\r\n      <Modal\r\n        open={openModal}\r\n        onClose={handleCloseModal}\r\n      >\r\n        <div style={modalStyle} className={classes.paper}>\r\n          <h2 id=\"simple-modal-title\">Ви впевнені що хочете видалити пост?</h2>\r\n          <Grid container spacing={3}>\r\n            <Grid item xs>\r\n              <Grid item xs={3}>\r\n                <Paper>   </Paper>\r\n              </Grid>\r\n              <Button variant=\"contained\" color=\"primary\" onClick={confirmed}>\r\n                Так\r\n              </Button>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              <Button variant=\"contained\" color=\"secondary\" onClick={() => setOpenModal(false)}>\r\n                Ні\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </Modal>\r\n    </Grid>\r\n  )\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\CreateQuiz\\index.js",["529","530","531","532"],"import React, { useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Button from '@material-ui/core/Button'\r\nimport Box from '@material-ui/core/Box'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport RemoveIcon from '@material-ui/icons/Remove'\r\nimport { green } from '@material-ui/core/colors'\r\nimport Radio from '@material-ui/core/Radio'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport QuizsStore from \"../../../../modules/quizs\"\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    input: {\r\n        marginTop: 0,\r\n        width: '100%',\r\n    },\r\n    divider: {\r\n        marginTop: 15,\r\n        //marginBottom: 15\r\n    },\r\n    listHeader: {\r\n        fontWeight: 'bold',\r\n    },\r\n    demo: {\r\n        backgroundColor: theme.palette.background.paper,\r\n    },\r\n    li: {\r\n        marginRight: theme.spacing(1)\r\n    },\r\n    red: {\r\n        color: '#c31432'\r\n    },\r\n    formControl: {\r\n        marginBottom: theme.spacing(1),\r\n        minWidth: '100%',\r\n    },\r\n}))\r\nconst GreenRadio = withStyles({\r\n    root: {\r\n        color: green[400],\r\n        '&$checked': {\r\n            color: green[600],\r\n        },\r\n    },\r\n    checked: {},\r\n})((props) => <Radio color=\"default\" {...props} />)\r\n\r\nconst CreateQuiz = () => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n\r\n    const question = useSelector(QuizsStore.getQuestion)\r\n    const options = useSelector(QuizsStore.getOptions)\r\n    const type = useSelector(QuizsStore.getType)\r\n    const explanation = useSelector(QuizsStore.getExplanation)\r\n    const correctOptionId = useSelector(QuizsStore.getCorrectOptionId)\r\n\r\n    const [answer, setAnswer] = useState('')\r\n    const [editInput, setEditInput] = useState('')\r\n    const [editInputID, setEditInputID] = useState(0)\r\n    const [open, setOpen] = React.useState(false)\r\n\r\n    const handleQuestionChange = (event) => {\r\n        event.preventDefault()\r\n        dispatch(QuizsStore.setQuestion(event.target.value))\r\n    }\r\n\r\n    const handleAnswerChange = (event) => {\r\n        event.preventDefault()\r\n        setAnswer(event.target.value)\r\n    }\r\n\r\n    const handleAddOptionClick = () => {\r\n        dispatch(QuizsStore.setOption(answer))\r\n        setAnswer('')\r\n    }\r\n\r\n    const handleClickOpen = (id) => {\r\n        setOpen(true)\r\n        setEditInput(options[id])\r\n        setEditInputID(id)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleEditInput = (event) => {\r\n        setEditInput(event.target.value)\r\n    }\r\n\r\n    const handleConfirmEdit = () => {\r\n        dispatch(QuizsStore.editOption(editInputID, editInput))\r\n        setOpen(false)\r\n    }\r\n\r\n    const handleDeleteOption = (index) => {\r\n        dispatch(QuizsStore.deleteOption(index))\r\n    }\r\n\r\n    const handleChangeType = (event) => {\r\n        switch (event.target.value) {\r\n            case 'default': {\r\n                dispatch(QuizsStore.setTypeDefualt())\r\n                break\r\n            }\r\n            case 'quiz': {\r\n                dispatch(QuizsStore.setTypeQuiz())\r\n                break\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleChangeExplanation = (event) => {\r\n        dispatch(QuizsStore.setExplanation(event.target.value))\r\n    }\r\n    const handleChangeCorrectAnswerId = (event) => {\r\n        dispatch(QuizsStore.setCorrectOptionId(event.target.value))\r\n    }\r\n\r\n    const handleCreate = () => {\r\n        dispatch(QuizsStore.create())\r\n    }\r\n\r\n    const handleCreateInArchive = () => {\r\n        dispatch(QuizsStore.createInArchive())\r\n    }\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Grid container >\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                        className={classes.input}\r\n                        label=\"Питання:\"\r\n                        color=\"primary\"\r\n                        multiline\r\n                        value={question}\r\n                        onChange={handleQuestionChange}\r\n                        error={question.length > 300}\r\n                    />\r\n                    <InputLabel align=\"right\" htmlFor=\"component-disabled\">{`${question.length} / 300`}</InputLabel>\r\n                </Grid>\r\n                <Grid container>\r\n                    <Grid item xs sm={6}>\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel id=\"demo-controlled-open-select-label\">Оберіть режим:</InputLabel>\r\n                            <Select\r\n                                value={type}\r\n                                onChange={handleChangeType}\r\n                            >\r\n                                <MenuItem value={'default'} >Опитування</MenuItem>\r\n                                <MenuItem value={'quiz'}>Вікторина</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                    {options.length !== 0 && <InputLabel className={classes.listHeader}>Варіанти:</InputLabel>}\r\n                    <List component=\"div\" >\r\n                        {\r\n                            options.map((el, index) =>\r\n                                <Grid container xs={12}>\r\n                                    <ListItem button>\r\n                                        <Grid container>\r\n                                            <Grid\r\n                                                container\r\n                                                wrap=\"nowrap\"\r\n                                                item\r\n                                                xs\r\n                                                alignItems=\"center\"\r\n                                            >\r\n                                                <Grid item >\r\n                                                    <RemoveIcon smDown fontSize=\"small\" className={classes.li} />\r\n                                                </Grid>\r\n                                                <Grid item>\r\n                                                    <ListItemText item primary={el} />\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                            <Grid\r\n                                                container\r\n                                                item\r\n                                                justify=\"center\"\r\n                                                alignItems=\"center\"\r\n                                                xs={2}\r\n\r\n                                            >\r\n                                                {\r\n                                                    type === \"quiz\" &&\r\n                                                    <Grid item>\r\n                                                        <GreenRadio\r\n                                                            checked={correctOptionId == index}\r\n                                                            onChange={handleChangeCorrectAnswerId}\r\n                                                            value={index}\r\n                                                            name=\"radio-button-demo\"\r\n                                                        />\r\n                                                    </Grid>\r\n                                                }\r\n                                                <Grid item>\r\n                                                    <IconButton\r\n                                                        aria-label=\"edite\"\r\n                                                        className={classes.margin}\r\n                                                        size=\"small\"\r\n\r\n                                                        onClick={() => handleClickOpen(index)}\r\n                                                    >\r\n                                                        <EditIcon fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                                <Grid item>\r\n                                                    <IconButton\r\n                                                        aria-label=\"delete\"\r\n                                                        className={classes.margin}\r\n                                                        size=\"small\"\r\n\r\n                                                        onClick={() => handleDeleteOption(index)}\r\n                                                    >\r\n                                                        <DeleteIcon fontSize=\"small\" />\r\n                                                    </IconButton>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </ListItem>\r\n                                    <Divider />\r\n                                </Grid>\r\n                            )\r\n                        }\r\n\r\n                    </List>\r\n                    {\r\n                        options.length !== 0 &&\r\n                        <InputLabel\r\n                            align=\"right\"\r\n                            htmlFor=\"component-disabled\"\r\n                        >\r\n                            {`${options.length} / 10`}\r\n                        </InputLabel>\r\n                    }\r\n\r\n                </Grid>\r\n                {\r\n                    options.length < 10 &&\r\n                    <Grid container item >\r\n                        <Grid item xs={12} sm={10}>\r\n                            <TextField\r\n                                className={classes.input}\r\n                                label=\"Додати варіант відповіді:\"\r\n                                color=\"primary\"\r\n                                value={answer}\r\n                                multiline\r\n                                onChange={handleAnswerChange}\r\n                                error={answer.length > 100}\r\n                            />\r\n                            <InputLabel align=\"right\" htmlFor=\"component-disabled\">{`${answer.length} / 100`}</InputLabel>\r\n                            {\r\n                                options.length < 2 &&\r\n                                <InputLabel\r\n                                    className={classes.red}\r\n                                    align=\"right\" htmlFor=\"component-disabled\"\r\n                                >\r\n                                    Мінімальна кількість варіантів відповіді - 2!\r\n                                </InputLabel>\r\n                            }\r\n                        </Grid>\r\n                        <Grid container item xs={12} sm alignItems=\"center\" justify=\"center\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                disabled={answer.length == 0 || answer.length > 100}\r\n                                onClick={handleAddOptionClick}\r\n                            >\r\n                                Ok\r\n                            </Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n            </Grid>\r\n            {\r\n                type === \"quiz\" &&\r\n                <Grid container >\r\n                    <Grid item xs={12}>\r\n                        <TextField\r\n                            className={classes.input}\r\n                            label=\"Пояснення правильної відповіді:\"\r\n                            color=\"primary\"\r\n                            multiline\r\n                            value={explanation}\r\n                            onChange={handleChangeExplanation}\r\n                            error={explanation.length > 200}\r\n                        />\r\n                        <InputLabel align=\"right\" htmlFor=\"component-disabled\">{`${explanation.length} / 200`}</InputLabel>\r\n                    </Grid>\r\n                </Grid>\r\n            }\r\n            <Box py={3}>\r\n                <Grid container spacing={3} direction=\"row\" justify=\"center\">\r\n                    <Box mx={2} mt={2} my={1}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={\r\n                                question.length === 0 ||\r\n                                question.length > 300 ||\r\n                                options.length < 2 ||\r\n                                options.length > 10 ||\r\n                                explanation.length > 200\r\n                            }\r\n                        onClick={handleCreate}\r\n                        >\r\n                            Опублікувати\r\n                        </Button>\r\n                    </Box>\r\n                    <Box mx={2} my={1}>\r\n                        <Button\r\n                            item variant=\"contained\"\r\n                            color=\"primary\"\r\n                            disabled={\r\n                                question.length === 0 ||\r\n                                question.length > 300 ||\r\n                                options.length < 2 ||\r\n                                options.length > 10 ||\r\n                                explanation.length > 200\r\n                            }\r\n                        onClick={handleCreateInArchive}\r\n                        >\r\n                            Додати в архів\r\n                        </Button>\r\n                    </Box>\r\n                </Grid>\r\n            </Box>\r\n            <div>\r\n                <Dialog\r\n                    className={classes.input}\r\n                    open={open}\r\n                    onClose={handleClose}\r\n                    aria-labelledby=\"form-dialog-title\"\r\n                    fullWidth={true}\r\n                >\r\n                    <DialogTitle id=\"form-dialog-title\">Редагування</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            value={editInput}\r\n                            id=\"name\"\r\n                            label=\"Ввведіть новий текст\"\r\n                            onChange={handleEditInput}\r\n                            fullWidth\r\n                            multiline\r\n                            error={editInput.length > 100}\r\n                        />\r\n                        <InputLabel align=\"right\" htmlFor=\"component-disabled\">{`${editInput.length} / 100`}</InputLabel>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"primary\">\r\n                            Закрити\r\n                        </Button>\r\n                        <Button\r\n                            onClick={handleConfirmEdit}\r\n                            color=\"primary\"\r\n                            disabled={editInput.length == 0 || editInput.length > 100}\r\n                        >\r\n                            ОК\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CreateQuiz","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\quizs\\index.js",["533"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\quizs\\sagas.js",["534","535"],"import { call, put, takeEvery, all, select } from 'redux-saga/effects'\r\nimport actions from './actions'\r\nimport { postAPI } from '../../api/api'\r\nimport selectors from './selectors'\r\n\r\nfunction* sendQuiz({ payload }) {\r\n    yield put(actions.setFetching(true))\r\n\r\n    const token = yield select(selectors.getToken)\r\n    const channel = yield select(selectors.getCurrentChannel)\r\n    const options = yield select(selectors.getOptions)\r\n    const question = yield select(selectors.getQuestion)\r\n    const type = yield select(selectors.getType)\r\n    const explanation = yield select(selectors.getExplanation)\r\n    const correct_option_id = yield select(selectors.getCorrectOptionId)\r\n\r\n    try {\r\n        var content;\r\n        if (type === 'default') {\r\n            content = {\r\n                question, options\r\n            }\r\n        } else {\r\n            content = {\r\n                question, options, type, explanation: explanation.trim(), correct_option_id\r\n            }\r\n        }\r\n        console.log(JSON.stringify(content));\r\n        const result = yield call(postAPI.createQuiz, { token, channel, content: JSON.stringify(content), inArchive: payload.inArchive })\r\n        //yield put(actions.setStatistic(result.statistic))\r\n        yield put(actions.setInitialState())\r\n\r\n    } catch (error) {\r\n\r\n    }\r\n    yield put(actions.setFetching(false))\r\n}\r\n\r\nexport default function* () {\r\n    yield all([\r\n        takeEvery('QUIZS/CREATE', sendQuiz),\r\n    ]);\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\quizs\\selectors.js",["536"],"export default {\r\n    getFetching: (state) => state.statistic.fetching,\r\n    getToken: (state) => state.auth.token,\r\n    getQuestion: (state) => state.quizs.question,\r\n    getOptions: (state) => state.quizs.options,\r\n    getExplanation: (state) => state.quizs.explanation,\r\n    getType: (state) => state.quizs.type,\r\n    getCorrectOptionId: (state) => state.quizs.correct_option_id,\r\n    getCurrentChannel: (state) => state.channels.currentChannel,\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\quizs\\reducer.js",["537","538"],"const initialState = {\r\n    fetching: false,\r\n    question: '',\r\n    options: [],\r\n    type: 'default',\r\n    correct_option_id: 0,\r\n    explanation: ''\r\n}\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n\r\n        case 'QUIZS/SET/FETCHING':\r\n        case 'QUIZS/SET/QUESTION':\r\n        case 'QUIZS/SET/TYPE':\r\n        case 'QUIZS/SET/CORRECT_OPTION_ID':\r\n        case 'QUIZS/SET/EXPLANATION':\r\n            return { ...state, ...payload }\r\n\r\n        case 'QUIZS/SET/INITIAL_STATE': {\r\n            const obj = {\r\n                question: '',\r\n                options: [],\r\n                type: 'default',\r\n                correct_option_id: 0,\r\n                explanation: ''\r\n            }\r\n            return { ...state, ...obj }\r\n        }\r\n        case 'QUIZS/SET/OPTION': {\r\n            const options = [...state.options, payload.option]\r\n            return { ...state, options }\r\n        }\r\n        case 'QUIZS/EDIT/OPTION': {\r\n            state.options[payload.id] = payload.value\r\n            return { ...state, options: [...state.options] }\r\n        }\r\n        case 'QUIZS/DELETE/OPTION': {\r\n            const options = state.options.filter((el, index) => index != payload.index)\r\n            return { ...state, options }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\modules\\quizs\\actions.js",["539"],"export default {\r\n    setFetching: (value) => ({ type: 'QUIZS/SET/FETCHING', payload: {fetching: value}}),\r\n    setQuestion: (value) => ({ type: 'QUIZS/SET/QUESTION', payload: {question: value}}),\r\n    setOption: (value) => ({ type: 'QUIZS/SET/OPTION', payload: {option: value}}),\r\n    editOption: (id, value) => ({ type: 'QUIZS/EDIT/OPTION', payload: {id, value}}),\r\n    deleteOption: (value) => ({ type: 'QUIZS/DELETE/OPTION', payload: {index: value}}),\r\n    setExplanation: (value) => ({ type: 'QUIZS/SET/EXPLANATION', payload: {explanation: value}}),\r\n    setTypeQuiz: () => ({ type: 'QUIZS/SET/TYPE', payload: {type: \"quiz\"}}),\r\n    setTypeDefualt: () => ({ type: 'QUIZS/SET/TYPE', payload: {type: \"default\"}}),\r\n    setCorrectOptionId: (value) => ({ type: 'QUIZS/SET/CORRECT_OPTION_ID', payload: {correct_option_id: value}}),\r\n    create: () => ({ type: 'QUIZS/CREATE', payload: {inArchive: false}}),\r\n    createInArchive: () => ({ type: 'QUIZS/CREATE', payload: {inArchive: true}}),\r\n    setInitialState: () => ({ type: 'QUIZS/SET/INITIAL_STATE', payload: {}}),\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\ChannelPage\\index.js",["540","541","542"],{"ruleId":"543","replacedBy":"544"},{"ruleId":"545","replacedBy":"546"},{"ruleId":"543","replacedBy":"547"},{"ruleId":"545","replacedBy":"548"},{"ruleId":"549","severity":1,"message":"550","line":6,"column":8,"nodeType":"551","messageId":"552","endLine":6,"endColumn":24},{"ruleId":"549","severity":1,"message":"553","line":7,"column":8,"nodeType":"551","messageId":"552","endLine":7,"endColumn":16},{"ruleId":"549","severity":1,"message":"554","line":9,"column":8,"nodeType":"551","messageId":"552","endLine":9,"endColumn":11},{"ruleId":"549","severity":1,"message":"555","line":25,"column":27,"nodeType":"551","messageId":"552","endLine":25,"endColumn":35},{"ruleId":"549","severity":1,"message":"556","line":25,"column":37,"nodeType":"551","messageId":"552","endLine":25,"endColumn":42},{"ruleId":"549","severity":1,"message":"557","line":3,"column":8,"nodeType":"551","messageId":"552","endLine":3,"endColumn":17},{"ruleId":"549","severity":1,"message":"550","line":4,"column":8,"nodeType":"551","messageId":"552","endLine":4,"endColumn":24},{"ruleId":"549","severity":1,"message":"553","line":5,"column":8,"nodeType":"551","messageId":"552","endLine":5,"endColumn":16},{"ruleId":"549","severity":1,"message":"554","line":8,"column":8,"nodeType":"551","messageId":"552","endLine":8,"endColumn":11},{"ruleId":"549","severity":1,"message":"555","line":27,"column":27,"nodeType":"551","messageId":"552","endLine":27,"endColumn":35},{"ruleId":"549","severity":1,"message":"556","line":27,"column":37,"nodeType":"551","messageId":"552","endLine":27,"endColumn":42},{"ruleId":"549","severity":1,"message":"558","line":1,"column":17,"nodeType":"551","messageId":"552","endLine":1,"endColumn":26},{"ruleId":"549","severity":1,"message":"559","line":3,"column":7,"nodeType":"551","messageId":"552","endLine":3,"endColumn":16},{"ruleId":"560","severity":1,"message":"561","line":11,"column":1,"nodeType":"562","endLine":20,"endColumn":2},{"ruleId":"543","replacedBy":"563"},{"ruleId":"545","replacedBy":"564"},{"ruleId":"560","severity":1,"message":"561","line":12,"column":1,"nodeType":"562","endLine":29,"endColumn":2},{"ruleId":"560","severity":1,"message":"561","line":27,"column":1,"nodeType":"562","endLine":37,"endColumn":2},{"ruleId":"549","severity":1,"message":"565","line":50,"column":15,"nodeType":"551","messageId":"552","endLine":50,"endColumn":21},{"ruleId":"543","replacedBy":"566"},{"ruleId":"545","replacedBy":"567"},{"ruleId":"549","severity":1,"message":"568","line":19,"column":10,"nodeType":"551","messageId":"552","endLine":19,"endColumn":22},{"ruleId":"549","severity":1,"message":"569","line":25,"column":8,"nodeType":"551","messageId":"552","endLine":25,"endColumn":20},{"ruleId":"570","severity":1,"message":"571","line":97,"column":6,"nodeType":"572","endLine":97,"endColumn":8,"suggestions":"573"},{"ruleId":"549","severity":1,"message":"574","line":9,"column":10,"nodeType":"551","messageId":"552","endLine":9,"endColumn":17},{"ruleId":"549","severity":1,"message":"575","line":108,"column":11,"nodeType":"551","messageId":"552","endLine":108,"endColumn":25},{"ruleId":"549","severity":1,"message":"576","line":3,"column":8,"nodeType":"551","messageId":"552","endLine":3,"endColumn":13},{"ruleId":"577","severity":1,"message":"578","line":28,"column":13,"nodeType":"579","endLine":28,"endColumn":72},{"ruleId":"549","severity":1,"message":"580","line":3,"column":8,"nodeType":"551","messageId":"552","endLine":3,"endColumn":12},{"ruleId":"549","severity":1,"message":"581","line":8,"column":8,"nodeType":"551","messageId":"552","endLine":8,"endColumn":19},{"ruleId":"549","severity":1,"message":"582","line":9,"column":8,"nodeType":"551","messageId":"552","endLine":9,"endColumn":16},{"ruleId":"549","severity":1,"message":"583","line":10,"column":8,"nodeType":"551","messageId":"552","endLine":10,"endColumn":14},{"ruleId":"549","severity":1,"message":"584","line":11,"column":8,"nodeType":"551","messageId":"552","endLine":11,"endColumn":18},{"ruleId":"549","severity":1,"message":"585","line":13,"column":10,"nodeType":"551","messageId":"552","endLine":13,"endColumn":17},{"ruleId":"549","severity":1,"message":"586","line":14,"column":8,"nodeType":"551","messageId":"552","endLine":14,"endColumn":20},{"ruleId":"549","severity":1,"message":"587","line":15,"column":8,"nodeType":"551","messageId":"552","endLine":15,"endColumn":17},{"ruleId":"549","severity":1,"message":"588","line":16,"column":8,"nodeType":"551","messageId":"552","endLine":16,"endColumn":22},{"ruleId":"549","severity":1,"message":"589","line":17,"column":8,"nodeType":"551","messageId":"552","endLine":17,"endColumn":20},{"ruleId":"549","severity":1,"message":"590","line":18,"column":10,"nodeType":"551","messageId":"552","endLine":18,"endColumn":13},{"ruleId":"591","severity":1,"message":"592","line":44,"column":54,"nodeType":"593","messageId":"594","endLine":44,"endColumn":58},{"ruleId":"591","severity":1,"message":"592","line":48,"column":33,"nodeType":"593","messageId":"594","endLine":48,"endColumn":37},{"ruleId":"560","severity":1,"message":"595","line":10,"column":1,"nodeType":"562","endLine":12,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":10,"column":1,"nodeType":"562","endLine":12,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":10,"column":1,"nodeType":"562","endLine":12,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":14,"endColumn":2},{"ruleId":"560","severity":1,"message":"561","line":13,"column":1,"nodeType":"562","endLine":49,"endColumn":2},{"ruleId":"596","severity":1,"message":"597","line":44,"column":9,"nodeType":"598","messageId":"599","endLine":45,"endColumn":44},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":18,"endColumn":2},{"ruleId":"549","severity":1,"message":"600","line":3,"column":10,"nodeType":"551","messageId":"552","endLine":3,"endColumn":20},{"ruleId":"549","severity":1,"message":"565","line":26,"column":15,"nodeType":"551","messageId":"552","endLine":26,"endColumn":21},{"ruleId":"549","severity":1,"message":"565","line":56,"column":15,"nodeType":"551","messageId":"552","endLine":56,"endColumn":21},{"ruleId":"549","severity":1,"message":"565","line":71,"column":15,"nodeType":"551","messageId":"552","endLine":71,"endColumn":21},{"ruleId":"549","severity":1,"message":"565","line":100,"column":15,"nodeType":"551","messageId":"552","endLine":100,"endColumn":21},{"ruleId":"549","severity":1,"message":"565","line":115,"column":15,"nodeType":"551","messageId":"552","endLine":115,"endColumn":21},{"ruleId":"549","severity":1,"message":"601","line":126,"column":11,"nodeType":"551","messageId":"552","endLine":126,"endColumn":15},{"ruleId":"549","severity":1,"message":"602","line":128,"column":11,"nodeType":"551","messageId":"552","endLine":128,"endColumn":18},{"ruleId":"549","severity":1,"message":"565","line":130,"column":15,"nodeType":"551","messageId":"552","endLine":130,"endColumn":21},{"ruleId":"560","severity":1,"message":"603","line":139,"column":1,"nodeType":"562","endLine":150,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":6,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":7,"endColumn":2},{"ruleId":"604","severity":1,"message":"605","line":6,"column":5,"nodeType":"606","messageId":"594","endLine":6,"endColumn":17},{"ruleId":"560","severity":1,"message":"561","line":9,"column":1,"nodeType":"562","endLine":20,"endColumn":2},{"ruleId":"549","severity":1,"message":"607","line":2,"column":8,"nodeType":"551","messageId":"552","endLine":2,"endColumn":17},{"ruleId":"560","severity":1,"message":"603","line":41,"column":1,"nodeType":"562","endLine":46,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":9,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":13,"endColumn":2},{"ruleId":"560","severity":1,"message":"561","line":10,"column":1,"nodeType":"562","endLine":34,"endColumn":2},{"ruleId":"549","severity":1,"message":"600","line":3,"column":10,"nodeType":"551","messageId":"552","endLine":3,"endColumn":20},{"ruleId":"549","severity":1,"message":"608","line":48,"column":15,"nodeType":"551","messageId":"552","endLine":48,"endColumn":18},{"ruleId":"549","severity":1,"message":"608","line":64,"column":15,"nodeType":"551","messageId":"552","endLine":64,"endColumn":18},{"ruleId":"560","severity":1,"message":"603","line":76,"column":1,"nodeType":"562","endLine":83,"endColumn":2},{"ruleId":"549","severity":1,"message":"609","line":6,"column":8,"nodeType":"551","messageId":"552","endLine":6,"endColumn":25},{"ruleId":"549","severity":1,"message":"610","line":62,"column":10,"nodeType":"551","messageId":"552","endLine":62,"endColumn":23},{"ruleId":"549","severity":1,"message":"611","line":67,"column":9,"nodeType":"551","messageId":"552","endLine":67,"endColumn":24},{"ruleId":"549","severity":1,"message":"612","line":70,"column":9,"nodeType":"551","messageId":"552","endLine":70,"endColumn":25},{"ruleId":"613","severity":1,"message":"614","line":91,"column":5,"nodeType":"615","messageId":"616","endLine":113,"endColumn":6},{"ruleId":"549","severity":1,"message":"617","line":1,"column":28,"nodeType":"551","messageId":"552","endLine":1,"endColumn":36},{"ruleId":"570","severity":1,"message":"618","line":68,"column":8,"nodeType":"572","endLine":68,"endColumn":10,"suggestions":"619"},{"ruleId":"620","severity":1,"message":"621","line":94,"column":99,"nodeType":"622","messageId":"594","endLine":94,"endColumn":101},{"ruleId":"577","severity":1,"message":"578","line":132,"column":29,"nodeType":"579","endLine":132,"endColumn":102},{"ruleId":"570","severity":1,"message":"571","line":13,"column":8,"nodeType":"572","endLine":13,"endColumn":10,"suggestions":"623"},{"ruleId":"560","severity":1,"message":"595","line":10,"column":1,"nodeType":"562","endLine":12,"endColumn":2},{"ruleId":"560","severity":1,"message":"603","line":19,"column":1,"nodeType":"562","endLine":23,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":7,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":10,"endColumn":2},{"ruleId":"560","severity":1,"message":"561","line":18,"column":1,"nodeType":"562","endLine":29,"endColumn":2},{"ruleId":"570","severity":1,"message":"618","line":92,"column":6,"nodeType":"572","endLine":92,"endColumn":11,"suggestions":"624"},{"ruleId":"549","severity":1,"message":"625","line":3,"column":10,"nodeType":"551","messageId":"552","endLine":3,"endColumn":19},{"ruleId":"570","severity":1,"message":"618","line":18,"column":8,"nodeType":"572","endLine":18,"endColumn":10,"suggestions":"626"},{"ruleId":"549","severity":1,"message":"627","line":4,"column":23,"nodeType":"551","messageId":"552","endLine":4,"endColumn":35},{"ruleId":"628","severity":1,"message":"629","line":38,"column":37,"nodeType":"593","messageId":"630","endLine":38,"endColumn":38,"suggestions":"631"},{"ruleId":"628","severity":1,"message":"629","line":58,"column":37,"nodeType":"593","messageId":"630","endLine":58,"endColumn":38,"suggestions":"632"},{"ruleId":"560","severity":1,"message":"595","line":10,"column":1,"nodeType":"562","endLine":12,"endColumn":2},{"ruleId":"560","severity":1,"message":"561","line":10,"column":1,"nodeType":"562","endLine":21,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":12,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":11,"endColumn":2},{"ruleId":"549","severity":1,"message":"600","line":3,"column":10,"nodeType":"551","messageId":"552","endLine":3,"endColumn":20},{"ruleId":"549","severity":1,"message":"565","line":29,"column":15,"nodeType":"551","messageId":"552","endLine":29,"endColumn":21},{"ruleId":"549","severity":1,"message":"565","line":44,"column":15,"nodeType":"551","messageId":"552","endLine":44,"endColumn":21},{"ruleId":"549","severity":1,"message":"565","line":59,"column":15,"nodeType":"551","messageId":"552","endLine":59,"endColumn":21},{"ruleId":"549","severity":1,"message":"601","line":70,"column":11,"nodeType":"551","messageId":"552","endLine":70,"endColumn":15},{"ruleId":"549","severity":1,"message":"602","line":72,"column":11,"nodeType":"551","messageId":"552","endLine":72,"endColumn":18},{"ruleId":"549","severity":1,"message":"565","line":74,"column":15,"nodeType":"551","messageId":"552","endLine":74,"endColumn":21},{"ruleId":"560","severity":1,"message":"603","line":83,"column":1,"nodeType":"562","endLine":91,"endColumn":2},{"ruleId":"549","severity":1,"message":"625","line":3,"column":10,"nodeType":"551","messageId":"552","endLine":3,"endColumn":19},{"ruleId":"570","severity":1,"message":"618","line":19,"column":8,"nodeType":"572","endLine":19,"endColumn":10,"suggestions":"633"},{"ruleId":"549","severity":1,"message":"580","line":3,"column":8,"nodeType":"551","messageId":"552","endLine":3,"endColumn":12},{"ruleId":"549","severity":1,"message":"581","line":8,"column":8,"nodeType":"551","messageId":"552","endLine":8,"endColumn":19},{"ruleId":"549","severity":1,"message":"582","line":9,"column":8,"nodeType":"551","messageId":"552","endLine":9,"endColumn":16},{"ruleId":"549","severity":1,"message":"583","line":10,"column":8,"nodeType":"551","messageId":"552","endLine":10,"endColumn":14},{"ruleId":"549","severity":1,"message":"584","line":11,"column":8,"nodeType":"551","messageId":"552","endLine":11,"endColumn":18},{"ruleId":"549","severity":1,"message":"585","line":13,"column":10,"nodeType":"551","messageId":"552","endLine":13,"endColumn":17},{"ruleId":"549","severity":1,"message":"586","line":14,"column":8,"nodeType":"551","messageId":"552","endLine":14,"endColumn":20},{"ruleId":"549","severity":1,"message":"587","line":15,"column":8,"nodeType":"551","messageId":"552","endLine":15,"endColumn":17},{"ruleId":"549","severity":1,"message":"588","line":16,"column":8,"nodeType":"551","messageId":"552","endLine":16,"endColumn":22},{"ruleId":"549","severity":1,"message":"589","line":17,"column":8,"nodeType":"551","messageId":"552","endLine":17,"endColumn":20},{"ruleId":"549","severity":1,"message":"590","line":18,"column":10,"nodeType":"551","messageId":"552","endLine":18,"endColumn":13},{"ruleId":"591","severity":1,"message":"592","line":44,"column":54,"nodeType":"593","messageId":"594","endLine":44,"endColumn":58},{"ruleId":"591","severity":1,"message":"592","line":48,"column":33,"nodeType":"593","messageId":"594","endLine":48,"endColumn":37},{"ruleId":"549","severity":1,"message":"609","line":6,"column":8,"nodeType":"551","messageId":"552","endLine":6,"endColumn":25},{"ruleId":"549","severity":1,"message":"610","line":59,"column":10,"nodeType":"551","messageId":"552","endLine":59,"endColumn":23},{"ruleId":"549","severity":1,"message":"611","line":63,"column":9,"nodeType":"551","messageId":"552","endLine":63,"endColumn":24},{"ruleId":"613","severity":1,"message":"614","line":76,"column":5,"nodeType":"615","messageId":"616","endLine":93,"endColumn":6},{"ruleId":"560","severity":1,"message":"595","line":10,"column":1,"nodeType":"562","endLine":12,"endColumn":2},{"ruleId":"549","severity":1,"message":"600","line":3,"column":10,"nodeType":"551","messageId":"552","endLine":3,"endColumn":20},{"ruleId":"549","severity":1,"message":"565","line":29,"column":15,"nodeType":"551","messageId":"552","endLine":29,"endColumn":21},{"ruleId":"549","severity":1,"message":"565","line":44,"column":15,"nodeType":"551","messageId":"552","endLine":44,"endColumn":21},{"ruleId":"549","severity":1,"message":"565","line":59,"column":15,"nodeType":"551","messageId":"552","endLine":59,"endColumn":21},{"ruleId":"560","severity":1,"message":"603","line":69,"column":1,"nodeType":"562","endLine":76,"endColumn":2},{"ruleId":"560","severity":1,"message":"561","line":10,"column":1,"nodeType":"562","endLine":21,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":11,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":11,"endColumn":2},{"ruleId":"549","severity":1,"message":"625","line":3,"column":10,"nodeType":"551","messageId":"552","endLine":3,"endColumn":19},{"ruleId":"570","severity":1,"message":"618","line":19,"column":8,"nodeType":"572","endLine":19,"endColumn":10,"suggestions":"634"},{"ruleId":"549","severity":1,"message":"580","line":3,"column":8,"nodeType":"551","messageId":"552","endLine":3,"endColumn":12},{"ruleId":"549","severity":1,"message":"581","line":8,"column":8,"nodeType":"551","messageId":"552","endLine":8,"endColumn":19},{"ruleId":"549","severity":1,"message":"582","line":9,"column":8,"nodeType":"551","messageId":"552","endLine":9,"endColumn":16},{"ruleId":"549","severity":1,"message":"583","line":10,"column":8,"nodeType":"551","messageId":"552","endLine":10,"endColumn":14},{"ruleId":"549","severity":1,"message":"584","line":11,"column":8,"nodeType":"551","messageId":"552","endLine":11,"endColumn":18},{"ruleId":"549","severity":1,"message":"585","line":13,"column":10,"nodeType":"551","messageId":"552","endLine":13,"endColumn":17},{"ruleId":"549","severity":1,"message":"586","line":14,"column":8,"nodeType":"551","messageId":"552","endLine":14,"endColumn":20},{"ruleId":"549","severity":1,"message":"587","line":15,"column":8,"nodeType":"551","messageId":"552","endLine":15,"endColumn":17},{"ruleId":"549","severity":1,"message":"588","line":16,"column":8,"nodeType":"551","messageId":"552","endLine":16,"endColumn":22},{"ruleId":"549","severity":1,"message":"589","line":17,"column":8,"nodeType":"551","messageId":"552","endLine":17,"endColumn":20},{"ruleId":"549","severity":1,"message":"590","line":18,"column":10,"nodeType":"551","messageId":"552","endLine":18,"endColumn":13},{"ruleId":"591","severity":1,"message":"592","line":44,"column":54,"nodeType":"593","messageId":"594","endLine":44,"endColumn":58},{"ruleId":"591","severity":1,"message":"592","line":48,"column":33,"nodeType":"593","messageId":"594","endLine":48,"endColumn":37},{"ruleId":"549","severity":1,"message":"609","line":6,"column":8,"nodeType":"551","messageId":"552","endLine":6,"endColumn":25},{"ruleId":"549","severity":1,"message":"610","line":59,"column":10,"nodeType":"551","messageId":"552","endLine":59,"endColumn":23},{"ruleId":"549","severity":1,"message":"611","line":63,"column":9,"nodeType":"551","messageId":"552","endLine":63,"endColumn":24},{"ruleId":"613","severity":1,"message":"614","line":76,"column":5,"nodeType":"615","messageId":"616","endLine":93,"endColumn":6},{"ruleId":"613","severity":1,"message":"614","line":121,"column":9,"nodeType":"615","messageId":"616","endLine":130,"endColumn":10},{"ruleId":"620","severity":1,"message":"635","line":211,"column":86,"nodeType":"622","messageId":"594","endLine":211,"endColumn":88},{"ruleId":"620","severity":1,"message":"635","line":288,"column":57,"nodeType":"622","messageId":"594","endLine":288,"endColumn":59},{"ruleId":"620","severity":1,"message":"635","line":380,"column":56,"nodeType":"622","messageId":"594","endLine":380,"endColumn":58},{"ruleId":"560","severity":1,"message":"595","line":10,"column":1,"nodeType":"562","endLine":12,"endColumn":2},{"ruleId":"549","severity":1,"message":"565","line":29,"column":15,"nodeType":"551","messageId":"552","endLine":29,"endColumn":21},{"ruleId":"560","severity":1,"message":"603","line":39,"column":1,"nodeType":"562","endLine":43,"endColumn":2},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":10,"endColumn":2},{"ruleId":"560","severity":1,"message":"561","line":10,"column":1,"nodeType":"562","endLine":45,"endColumn":2},{"ruleId":"620","severity":1,"message":"621","line":39,"column":71,"nodeType":"622","messageId":"594","endLine":39,"endColumn":73},{"ruleId":"560","severity":1,"message":"595","line":1,"column":1,"nodeType":"562","endLine":14,"endColumn":2},{"ruleId":"549","severity":1,"message":"576","line":8,"column":8,"nodeType":"551","messageId":"552","endLine":8,"endColumn":13},{"ruleId":"570","severity":1,"message":"636","line":95,"column":8,"nodeType":"572","endLine":95,"endColumn":18,"suggestions":"637"},{"ruleId":"577","severity":1,"message":"578","line":141,"column":25,"nodeType":"579","endLine":141,"endColumn":101},"no-native-reassign",["638"],"no-negated-in-lhs",["639"],["638"],["639"],"no-unused-vars","'FormControlLabel' is defined but never used.","Identifier","unusedVar","'Checkbox' is defined but never used.","'Box' is defined but never used.","'pristine' is assigned a value but never used.","'reset' is assigned a value but never used.","'TextField' is defined but never used.","'Component' is defined but never used.","'bot_token' is assigned a value but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["638"],["639"],"'result' is assigned a value but never used.",["638"],["639"],"'loadChannels' is defined but never used.","'postsReducer' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["640"],"'connect' is defined but never used.","'handleComplete' is assigned a value but never used.","'Paper' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'clsx' is defined but never used.","'CardActions' is defined but never used.","'Collapse' is defined but never used.","'Avatar' is defined but never used.","'IconButton' is defined but never used.","'primary' is defined but never used.","'FavoriteIcon' is defined but never used.","'ShareIcon' is defined but never used.","'ExpandMoreIcon' is defined but never used.","'MoreVertIcon' is defined but never used.","'Tab' is defined but never used.","no-control-regex","Unexpected control character(s) in regular expression: \\x0a.","Literal","unexpected","Assign object to a variable before exporting as module default","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'stopSubmit' is defined but never used.","'page' is assigned a value but never used.","'channel' is assigned a value but never used.","Unexpected default export of anonymous function","no-dupe-keys","Duplicate key 'refreshToken'.","ObjectExpression","'selectors' is defined but never used.","'res' is assigned a value but never used.","'ArrowDropDownIcon' is defined but never used.","'selectedIndex' is assigned a value but never used.","'handleOpenModal' is assigned a value but never used.","'handleOpenModal2' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array.",["641"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression",["642"],["643"],"'useParams' is defined but never used.",["644"],"'convertToRaw' is defined but never used.","no-useless-escape","Unnecessary escape character: \\/.","unnecessaryEscape",["645","646"],["647","648"],["649"],["650"],"Expected '===' and instead saw '=='.","React Hook useEffect has a missing dependency: 'currentChannelId'. Either include it or remove the dependency array.",["651"],"no-global-assign","no-unsafe-negation",{"desc":"652","fix":"653"},{"desc":"654","fix":"655"},{"desc":"652","fix":"656"},{"desc":"657","fix":"658"},{"desc":"654","fix":"659"},{"messageId":"660","fix":"661","desc":"662"},{"messageId":"663","fix":"664","desc":"665"},{"messageId":"660","fix":"666","desc":"662"},{"messageId":"663","fix":"667","desc":"665"},{"desc":"654","fix":"668"},{"desc":"654","fix":"669"},{"desc":"670","fix":"671"},"Update the dependencies array to be: [dispatch]",{"range":"672","text":"673"},"Update the dependencies array to be: [dispatch, id]",{"range":"674","text":"675"},{"range":"676","text":"673"},"Update the dependencies array to be: [dispatch, id, id_]",{"range":"677","text":"678"},{"range":"679","text":"675"},"removeEscape",{"range":"680","text":"681"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"682","text":"683"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"684","text":"681"},{"range":"685","text":"683"},{"range":"686","text":"675"},{"range":"687","text":"675"},"Update the dependencies array to be: [channels, currentChannelId]",{"range":"688","text":"689"},[2935,2937],"[dispatch]",[1757,1759],"[dispatch, id]",[517,519],[2472,2477],"[dispatch, id, id_]",[825,827],[1852,1853],"",[1852,1852],"\\",[2765,2766],[2765,2765],[828,830],[810,812],[2999,3009],"[channels, currentChannelId]"]