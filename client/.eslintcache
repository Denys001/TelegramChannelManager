[{"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\index.js":"1","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\App.js":"2","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\reportWebVitals.js":"3","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Login\\Login.js":"4","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Register\\Register.js":"5","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\store.js":"6","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Login\\loginForm.js":"7","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Register\\registerForm.js":"8","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\authLayout.js":"9","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\MyInput.js":"10","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\utils\\validators\\validators.js":"11","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\api\\api.js":"12","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\reducers\\authReducer.js":"13","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\api\\request.js":"14","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\common\\Loader\\Loader.js":"15","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Routes\\MainRoute.js":"16","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\tmp.js":"17","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\common\\Menu\\Menu.js":"18","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\reducers\\channelsReducer.js":"19","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\Addition.js":"20","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\Step1.js":"21","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\Step2.js":"22","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\OneStep.js":"23","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\ChannelPage.js":"24"},{"size":478,"mtime":1611408625988,"results":"25","hashOfConfig":"26"},{"size":357,"mtime":1612023529170,"results":"27","hashOfConfig":"26"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"26"},{"size":1051,"mtime":1612018366854,"results":"29","hashOfConfig":"26"},{"size":1198,"mtime":1611776298015,"results":"30","hashOfConfig":"26"},{"size":587,"mtime":1612088067185,"results":"31","hashOfConfig":"26"},{"size":2823,"mtime":1612253522382,"results":"32","hashOfConfig":"26"},{"size":3492,"mtime":1611501455282,"results":"33","hashOfConfig":"26"},{"size":1898,"mtime":1611490237390,"results":"34","hashOfConfig":"26"},{"size":790,"mtime":1611494921146,"results":"35","hashOfConfig":"26"},{"size":730,"mtime":1611489956583,"results":"36","hashOfConfig":"26"},{"size":669,"mtime":1612165667558,"results":"37","hashOfConfig":"26"},{"size":1775,"mtime":1612253563518,"results":"38","hashOfConfig":"26"},{"size":474,"mtime":1612127721465,"results":"39","hashOfConfig":"26"},{"size":364,"mtime":1611508335094,"results":"40","hashOfConfig":"26"},{"size":1333,"mtime":1612183470685,"results":"41","hashOfConfig":"26"},{"size":141,"mtime":1612025237144,"results":"42","hashOfConfig":"26"},{"size":5706,"mtime":1612166973759,"results":"43","hashOfConfig":"26"},{"size":1936,"mtime":1612184540107,"results":"44","hashOfConfig":"26"},{"size":5254,"mtime":1612182711321,"results":"45","hashOfConfig":"26"},{"size":1602,"mtime":1612104056634,"results":"46","hashOfConfig":"26"},{"size":6107,"mtime":1612122185949,"results":"47","hashOfConfig":"26"},{"size":844,"mtime":1612183271421,"results":"48","hashOfConfig":"26"},{"size":181,"mtime":1612183639866,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"s4q6x",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"52"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"52"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"52"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\index.js",[],["109","110"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\App.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\reportWebVitals.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Login\\Login.js",["111"],"import React from 'react';\r\nimport { Redirect } from 'react-router-dom'\r\nimport LoginForm from './loginForm';\r\nimport { AuthLayout } from './../authLayout'\r\nimport { connect } from 'react-redux'\r\nimport { LoginRequest } from '../../../redux/reducers/authReducer'\r\nimport Loader from '../../common/Loader/Loader'\r\nimport Cookies from 'js-cookie'\r\n\r\nfunction Login(props) {\r\n    const submit = (data) => {\r\n        props.LoginRequest(data)\r\n    }\r\n    if (props.isAuth) {\r\n\r\n        return (\r\n            <Redirect to=\"/\" />\r\n        )\r\n    }\r\n    return (\r\n        <AuthLayout>\r\n            {props.fetching ? <Loader></Loader> : ''}\r\n            <LoginForm onSubmit={submit}></LoginForm>\r\n        </AuthLayout>\r\n    );\r\n}\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        fetching: state.auth.fetching,\r\n        isAuth: state.auth.isAuth,\r\n        token: state.auth.token,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    LoginRequest,\r\n}\r\nconst LoginContainer = connect(mapStateToProps, mapDispatchToProps)(Login)\r\nexport default LoginContainer","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Register\\Register.js",["112"],"import React from 'react'\r\nimport {Redirect} from 'react-router-dom'\r\nimport RegisterForm from './registerForm'\r\nimport { AuthLayout } from './../authLayout'\r\nimport Loader from '../../common/Loader/Loader'\r\nimport { RegisterRequest } from '../../../redux/reducers/authReducer'\r\nimport { connect } from 'react-redux'\r\nimport { useCookies } from 'react-cookie'\r\nfunction Register(props) {\r\n    const [cookies, setCookie] = useCookies(['auth'])\r\n\r\n    const submit = (data) => {\r\n        props.RegisterRequest(data)\r\n    }\r\n    if(props.isAuth){\r\n        setCookie('token', props.token, { path: '/' })\r\n        return (\r\n            <Redirect to=\"/\" />\r\n        )\r\n    }\r\n    return (\r\n        <AuthLayout>\r\n            {props.fetching ? <Loader></Loader>: ''} \r\n            <RegisterForm onSubmit={submit}></RegisterForm>\r\n        </AuthLayout>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        fetching: state.auth.fetching,\r\n        isAuth: state.auth.isAuth,\r\n        token: state.auth.token,\r\n    }\r\n}\r\nconst mapDispatchToProps = {\r\n    RegisterRequest\r\n}\r\nconst RegisterContainer = connect(mapStateToProps, mapDispatchToProps)(Register)\r\nexport default RegisterContainer","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\store.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Login\\loginForm.js",["113","114","115","116","117"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\Register\\registerForm.js",["118","119","120","121","122","123"],"import React from 'react'\r\nimport Button from '@material-ui/core/Button'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport Checkbox from '@material-ui/core/Checkbox'\r\nimport LinkS from '@material-ui/core/Link'\r\nimport { Link } from 'react-router-dom'\r\nimport Box from '@material-ui/core/Box'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Field } from 'redux-form'\r\nimport { reduxForm } from 'redux-form'\r\nimport MyInput from './../MyInput'\r\nimport {email, required, minLengthCreator} from \"./../../../utils/validators/validators\"\r\nconst useStyles = makeStyles((theme) => ({\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n}));\r\nconst min6 = minLengthCreator(6)\r\nfunction RegisterForm(props) {\r\n    const classes = useStyles()\r\n    const { handleSubmit, pristine, reset, submitting } = props\r\n    return (\r\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\r\n            <Field\r\n                id=\"email\"\r\n                label=\"Електрона адреса\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                component={MyInput}\r\n                validate={[required, email]}\r\n            />\r\n            <Field\r\n                id=\"nickName\"\r\n                label=\"Нікнейм\"\r\n                name=\"nickName\"\r\n                autoComplete=\"nickName\"\r\n                component={MyInput}\r\n                validate={[required, min6]}\r\n            />\r\n            <Field\r\n                name=\"password\"\r\n                label=\"Пароль\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                component={MyInput}\r\n                validate={[required, min6]}\r\n            />\r\n            <Field\r\n                name=\"passwordConfirm\"\r\n                label=\"Підтвердження паролю\"\r\n                type=\"password\"\r\n                id=\"passwordConfirm\"\r\n                component={MyInput}\r\n                validate={[required]}\r\n            />\r\n            {/* <FormControlLabel\r\n                            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                            label=\"Remember me\"\r\n                            /> */}\r\n\r\n            <Grid container>\r\n                {/* <Grid item xs>\r\n                                <Link href=\"#\" variant=\"body2\">\r\n                                Forgot password?\r\n                                </Link>\r\n                            </Grid> */}\r\n                <Grid item>\r\n                    <Link to=\"/login\">\r\n                        <LinkS variant=\"body2\">\r\n                            {\"Вже маєте акаунт? Увійти\"}\r\n                        </LinkS>\r\n                    </Link>\r\n                </Grid>\r\n            </Grid>\r\n            <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n                disabled={submitting}\r\n            >\r\n                Зареєструватися\r\n            </Button>\r\n        </form>\r\n    )\r\n}\r\nconst RegisterReduxForm = reduxForm({ form: 'register' })(RegisterForm)\r\nexport default RegisterReduxForm","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\authLayout.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Auth\\MyInput.js",["124"],"import React, { Component } from 'react'\r\nimport TextField from '@material-ui/core/TextField'\r\n\r\nconst MyInput = field => {\r\n    const hasError = field.meta.touched && field.meta.error;\r\n    if (!hasError)\r\n        return (\r\n            < TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n                {...field}\r\n                {...field.input}\r\n            ></TextField >\r\n        )\r\n    else\r\n        return (\r\n            <TextField\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                fullWidth\r\n                {...field}\r\n                {...field.input}\r\n                error\r\n                helperText={field.meta.error}\r\n            ></TextField>\r\n        )\r\n}\r\nexport default MyInput","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\utils\\validators\\validators.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\api\\api.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\reducers\\authReducer.js",["125"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\api\\request.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\common\\Loader\\Loader.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Routes\\MainRoute.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\tmp.js",[],["126","127"],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\common\\Menu\\Menu.js",["128"],"import React, {useEffect} from 'react'\r\nimport clsx from 'clsx'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport List from '@material-ui/core/List'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport { Link } from 'react-router-dom'\r\nimport css from './Menu.module.css'\r\nimport TelegramIcon from '@material-ui/icons/Telegram'\r\nimport AddBoxIcon from '@material-ui/icons/AddBox'\r\nimport { connect } from 'react-redux'\r\nimport Loader from '../Loader/Loader'\r\nimport {loadChannels} from './../../../redux/reducers/channelsReducer'\r\n\r\nconst drawerWidth = 240\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  appBar: {\r\n    zIndex: theme.zIndex.drawer + 1,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n  appBarShift: {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  menuButton: {\r\n    marginRight: 36,\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n  },\r\n  drawerOpen: {\r\n    width: drawerWidth,\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n  drawerClose: {\r\n    transition: theme.transitions.create('width', {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    overflowX: 'hidden',\r\n    width: theme.spacing(7) + 1,\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: theme.spacing(9) + 1,\r\n    },\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0, 1),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}))\r\n\r\nfunction Menu(props) {\r\n  const classes = useStyles()\r\n  const theme = useTheme()\r\n  const [open, setOpen] = React.useState(true)\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true)\r\n  }\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false)\r\n  }\r\n  useEffect(() => {\r\n    props.loadChannels(props.token)\r\n  }, [])\r\n  return (\r\n    <div className={classes.root}>\r\n      {props.fetching && <Loader></Loader>}\r\n      <CssBaseline />\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            Telegram channel manager\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'rtl' ? <ChevronRightIcon /> : <ChevronLeftIcon />}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <List>\r\n          <Link to='/channel/add' className={css.Link}>\r\n            <ListItem button key=\"1\">\r\n              <ListItemIcon><AddBoxIcon /></ListItemIcon>\r\n              <ListItemText primary=\"Додати канал\" />\r\n            </ListItem>\r\n          </Link>\r\n        </List>\r\n        <Divider />\r\n        <List>\r\n          {props.channels && props.channels.length !== 0 && props.channels.map((el) => (\r\n            <Link to={`/channel/${el._id}`} className={css.Link}>\r\n              <ListItem button key={el.name}>\r\n                <ListItemIcon><TelegramIcon /></ListItemIcon>\r\n                <ListItemText primary={el.name} />\r\n              </ListItem>\r\n            </Link>\r\n          ))}\r\n        </List>\r\n      </Drawer>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        {props.children}\r\n      </main>\r\n    </div >\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    channels: state.channels.channels,\r\n    fetching: state.channels.fetching,\r\n    token: state.auth.token\r\n  }\r\n}\r\nconst mapDispatchToProps = {\r\n  loadChannels\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Menu)\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\redux\\reducers\\channelsReducer.js",["129"],"import { channelAPI } from '../../api/api'\r\n\r\nconst initialState = {\r\n    channels: [],\r\n    code: null,\r\n    fetching: false\r\n}\r\nconst GENERATECODE = 'generateCode'\r\nconst NULLCODE = 'nullCode'\r\nconst SET = 'SET'\r\n\r\nexport default (state = initialState, { type, payload }) => {\r\n    switch (type) {\r\n        case GENERATECODE:\r\n            var result = '';\r\n            var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n            var charactersLength = characters.length;\r\n            for (var i = 0; i < 5; i++) {\r\n                result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n            }\r\n            return { ...state, code: result }\r\n        case NULLCODE:\r\n            return { ...state, ...payload }\r\n        case SET:\r\n            return { ...state, ...payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const generateCode = () => ({ type: GENERATECODE })\r\nexport const set = (value) => ({ type: SET, payload: value })\r\nexport const setErrorNull = () => ({ type: SET, payload: {error: false, errorMessage: ''} })\r\n\r\nexport const loadChannels = (token) => {\r\n    return async (dispatch) => {\r\n        dispatch(set({ fetching: true }))\r\n        const channels = await channelAPI.channels(token)\r\n        dispatch(set({ channels: channels.channels }))\r\n        dispatch(set({ fetching: false }))\r\n    }\r\n}\r\nexport const addChannels = (code, token) => {\r\n    return async (dispatch) => {\r\n        dispatch(set({ fetching: true }))\r\n        const add_result = await channelAPI.add(code, token)\r\n        if(add_result.ResultCode === 0){\r\n            const channels = await channelAPI.channels(token)\r\n            dispatch(set({ channels: channels.channels }))\r\n            dispatch(set({ code: null }))\r\n        }\r\n        dispatch(set({ fetching: false }))\r\n        if(add_result.ResultCode === 1){\r\n            return add_result.message\r\n        }\r\n        \r\n    }\r\n}","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\Addition.js",["130"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport CssBaseline from '@material-ui/core/CssBaseline'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport Step from '@material-ui/core/Step'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport Step1 from './Step1'\r\nimport Step2 from './Step2'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport { addChannels, setErrorNull } from '../../../redux/reducers/channelsReducer'\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: 'relative',\r\n  },\r\n  layout: {\r\n    width: 'auto',\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: 600,\r\n      marginLeft: 'auto',\r\n      marginRight: 'auto',\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(3),\r\n    padding: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n      marginTop: theme.spacing(6),\r\n      marginBottom: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n    },\r\n  },\r\n  stepper: {\r\n    padding: theme.spacing(3, 0, 5),\r\n  },\r\n  buttons: {\r\n    display: 'flex',\r\n    justifyContent: 'flex-end',\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(3),\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n}))\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nconst steps = ['Згенерувати код', 'Переслати повідомлення']\r\n\r\nfunction getStepContent(step) {\r\n  switch (step) {\r\n    case 0:\r\n      return <Step1 />\r\n    case 1:\r\n      return <Step2 />\r\n    default:\r\n      throw new Error('Unknown step')\r\n  }\r\n}\r\n\r\nconst Checkout = (props) => {\r\n  const classes = useStyles()\r\n  const [activeStep, setActiveStep] = React.useState(0)\r\n  const [open, setOpen] = React.useState(false)\r\n  const [errorMessage, setErrorMessage] = React.useState('error')\r\n  const handleNext = () => {\r\n    setActiveStep(activeStep + 1)\r\n  }\r\n  const handleBack = () => {\r\n    setActiveStep(activeStep - 1)\r\n  }\r\n  const Finish = async () => {\r\n    const error = await props.addChannels(props.code, props.token)\r\n    if (error) {\r\n      setErrorMessage(error)\r\n      setOpen(true)\r\n    }\r\n    else {\r\n      handleNext()\r\n    }\r\n  }\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    props.setErrorNull()\r\n    setOpen(false)\r\n  }\r\n  return (\r\n    <React.Fragment>\r\n      <CssBaseline />\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity=\"error\">\r\n          {errorMessage}\r\n        </Alert>\r\n      </Snackbar>\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h4\" align=\"center\">\r\n            Додати канал\r\n          </Typography>\r\n          <Stepper activeStep={activeStep} className={classes.stepper}>\r\n            {steps.map((label) => (\r\n              <Step key={label}>\r\n                <StepLabel>{label}</StepLabel>\r\n              </Step>\r\n            ))}\r\n          </Stepper>\r\n          <React.Fragment>\r\n            {activeStep === steps.length ? (\r\n              <React.Fragment>\r\n                <Typography variant=\"subtitle1\">\r\n                  Якщо ви все зробили відповідно до інструкції то канал з'явиться в переліку каналів. Важливо щоб бот був додан до телеграм каналу як адміністратор щоб вcе працювало коректно\r\n                </Typography>\r\n              </React.Fragment>\r\n            ) : (\r\n                <React.Fragment>\r\n                  {getStepContent(activeStep)}\r\n                  <div className={classes.buttons}>\r\n                    {activeStep !== 0 && (\r\n                      <Button onClick={handleBack} className={classes.button}>\r\n                        Назад\r\n                      </Button>\r\n                    )}\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={activeStep === steps.length - 1 ? Finish : handleNext}\r\n                      className={classes.button}\r\n                      disabled={!props.code && true}\r\n                    >\r\n                      {activeStep === steps.length - 1 ? 'Завершити' : 'Наступний крок'}\r\n                    </Button>\r\n                  </div>\r\n                </React.Fragment>\r\n              )}\r\n          </React.Fragment>\r\n        </Paper>\r\n      </main>\r\n    </React.Fragment>\r\n  )\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    code: state.channels.code,\r\n    token: state.auth.token\r\n  }\r\n}\r\nconst mapDispatchToProps = {\r\n  addChannels, setErrorNull\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Checkout)","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\Step1.js",[],"D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\Step2.js",["131","132","133","134"],"import React from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Stepper from '@material-ui/core/Stepper'\r\nimport Step from '@material-ui/core/Step'\r\nimport StepLabel from '@material-ui/core/StepLabel'\r\nimport StepContent from '@material-ui/core/StepContent'\r\nimport StepButton from '@material-ui/core/StepButton'\r\nimport Button from '@material-ui/core/Button'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { connect } from 'react-redux'\r\nimport OneStep from './OneStep'\r\nimport step1_img from './../../../asset/step1.png'\r\nimport step2_img from './../../../asset/step2.png'\r\nimport step3_img from './../../../asset/step3.png'\r\nimport step4_img from './../../../asset/step4.png'\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    button: {\r\n      marginTop: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n    },\r\n    actionsContainer: {\r\n      marginBottom: theme.spacing(2),\r\n    },\r\n    resetContainer: {\r\n      padding: theme.spacing(3),\r\n    },\r\n  }))\r\n  \r\n  function getSteps() {\r\n    return [\r\n        'Надіслати код в канал', \r\n        'Знайти телеграм бота', \r\n        'Переслати повідомлення з кодом з телеграм каналу',\r\n        'Додати бота як адміністратора'\r\n    ]\r\n  }\r\n  \r\n  function getStepContent(step) {\r\n    switch (step) {\r\n      case 0:\r\n        return <OneStep \r\n                    text=\"Згенерований код відправте в чат телеграм каналу\"\r\n                    imgPath={step1_img}\r\n                />\r\n      case 1:\r\n        return <OneStep \r\n                    text=\"В сторокі пошука знайдіть телеграм бота з назвою tcm_xBot\"\r\n                    imgPath={step2_img}\r\n                />\r\n      case 2:\r\n        return <OneStep \r\n                    text=\"Перешліть повідомлення з кодом з телеграм каналу в чат з ботом tcm_xBot\"\r\n                    imgPath={step3_img}\r\n                />\r\n      case 3:\r\n        return <OneStep \r\n                    text=\"Добавте телеграм бота tcm_xBot як адміністратора в телеграм канал\"\r\n                    imgPath={step4_img}\r\n                />\r\n      default:\r\n        return 'Unknown step'\r\n    }\r\n  }\r\n  function Step2(props) {\r\n    const classes = useStyles();\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const [completed, setCompleted] = React.useState({});\r\n    const steps = getSteps();\r\n  \r\n    const totalSteps = () => {\r\n      return steps.length;\r\n    };\r\n  \r\n    const completedSteps = () => {\r\n      return Object.keys(completed).length;\r\n    };\r\n  \r\n    const isLastStep = () => {\r\n      return activeStep === totalSteps() - 1;\r\n    };\r\n  \r\n    const allStepsCompleted = () => {\r\n      return completedSteps() === totalSteps();\r\n    };\r\n  \r\n    const handleNext = () => {\r\n      const newActiveStep =\r\n        isLastStep() && !allStepsCompleted()\r\n          ? // It's the last step, but not all steps have been completed,\r\n            // find the first step that has been completed\r\n            steps.findIndex((step, i) => !(i in completed))\r\n          : activeStep + 1;\r\n      setActiveStep(newActiveStep);\r\n    };\r\n  \r\n    const handleBack = () => {\r\n      setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n  \r\n    const handleStep = (step) => () => {\r\n      setActiveStep(step);\r\n    };\r\n  \r\n    const handleComplete = () => {\r\n      const newCompleted = completed;\r\n      newCompleted[activeStep] = true;\r\n      setCompleted(newCompleted);\r\n      handleNext();\r\n    };\r\n  \r\n    const handleReset = () => {\r\n      setActiveStep(0);\r\n      setCompleted({});\r\n    };\r\n  \r\n    return (\r\n      <div className={classes.root}>\r\n        <Stepper nonLinear activeStep={activeStep} orientation=\"vertical\">\r\n          {steps.map((label, index) => (\r\n            <Step key={label}>\r\n              <StepButton onClick={handleStep(index)} completed={completed[index]}>\r\n                {label}\r\n              </StepButton>\r\n            </Step>\r\n          ))}\r\n        </Stepper>\r\n        <div>\r\n          {allStepsCompleted() ? (\r\n            <div>\r\n              <Typography className={classes.instructions}>\r\n                Всі кроки завершині\r\n              </Typography>\r\n              <Button onClick={handleReset}>Заново</Button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\r\n              <div>\r\n                <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\r\n                  Назад\r\n                </Button>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  onClick={handleNext}\r\n                  className={classes.button}\r\n                >\r\n                  Далі\r\n                </Button>\r\n                {/* {activeStep !== steps.length &&\r\n                  (completed[activeStep] ? (\r\n                    <Typography variant=\"caption\" className={classes.completed}>\r\n                      Крок {activeStep + 1} вже завершиний\r\n                    </Typography>\r\n                  ) : (\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={handleComplete} className={classes.button}>\r\n                      {completedSteps() === totalSteps() - 1 ? 'Завершити' : 'Завершити крок'}\r\n                    </Button>\r\n                  ))} */}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        code: state.channels.code\r\n    }\r\n} \r\nconst mapDispatchToProps = {\r\n    \r\n} \r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps )(Step2)","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\Addition\\OneStep.js",["135","136"],"import React from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Divider } from '@material-ui/core'\r\nconst useStyles = makeStyles((theme) => ({\r\n    wrapper: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: 10,\r\n        marginTop: 10\r\n    },\r\n    img: {\r\n        borderRadius: 5\r\n    }\r\n}))\r\nconst OneStep = ({ text, imgPath }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <div>\r\n            <Divider/>\r\n            <Typography>{text}</Typography>\r\n            <div className={classes.wrapper}>\r\n            <img src={imgPath} height=\"150px\" className={classes.img}/>\r\n\r\n            </div>\r\n            <Divider/>\r\n        </div>\r\n    )\r\n}\r\nexport default OneStep\r\n","D:\\MyFile\\College\\4 курс\\Курсова\\managerTelegramChannel\\client\\src\\components\\Channels\\ChannelPage\\ChannelPage.js",[],{"ruleId":"137","replacedBy":"138"},{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":8,"column":8,"nodeType":"143","messageId":"144","endLine":8,"endColumn":15},{"ruleId":"141","severity":1,"message":"145","line":10,"column":12,"nodeType":"143","messageId":"144","endLine":10,"endColumn":19},{"ruleId":"141","severity":1,"message":"146","line":6,"column":8,"nodeType":"143","messageId":"144","endLine":6,"endColumn":24},{"ruleId":"141","severity":1,"message":"147","line":7,"column":8,"nodeType":"143","messageId":"144","endLine":7,"endColumn":16},{"ruleId":"141","severity":1,"message":"148","line":9,"column":8,"nodeType":"143","messageId":"144","endLine":9,"endColumn":11},{"ruleId":"141","severity":1,"message":"149","line":25,"column":27,"nodeType":"143","messageId":"144","endLine":25,"endColumn":35},{"ruleId":"141","severity":1,"message":"150","line":25,"column":37,"nodeType":"143","messageId":"144","endLine":25,"endColumn":42},{"ruleId":"141","severity":1,"message":"151","line":3,"column":8,"nodeType":"143","messageId":"144","endLine":3,"endColumn":17},{"ruleId":"141","severity":1,"message":"146","line":4,"column":8,"nodeType":"143","messageId":"144","endLine":4,"endColumn":24},{"ruleId":"141","severity":1,"message":"147","line":5,"column":8,"nodeType":"143","messageId":"144","endLine":5,"endColumn":16},{"ruleId":"141","severity":1,"message":"148","line":8,"column":8,"nodeType":"143","messageId":"144","endLine":8,"endColumn":11},{"ruleId":"141","severity":1,"message":"149","line":27,"column":27,"nodeType":"143","messageId":"144","endLine":27,"endColumn":35},{"ruleId":"141","severity":1,"message":"150","line":27,"column":37,"nodeType":"143","messageId":"144","endLine":27,"endColumn":42},{"ruleId":"141","severity":1,"message":"152","line":1,"column":17,"nodeType":"143","messageId":"144","endLine":1,"endColumn":26},{"ruleId":"153","severity":1,"message":"154","line":11,"column":1,"nodeType":"155","endLine":20,"endColumn":2},{"ruleId":"137","replacedBy":"156"},{"ruleId":"139","replacedBy":"157"},{"ruleId":"158","severity":1,"message":"159","line":104,"column":6,"nodeType":"160","endLine":104,"endColumn":8,"suggestions":"161"},{"ruleId":"153","severity":1,"message":"154","line":12,"column":1,"nodeType":"155","endLine":29,"endColumn":2},{"ruleId":"141","severity":1,"message":"162","line":14,"column":19,"nodeType":"143","messageId":"144","endLine":14,"endColumn":30},{"ruleId":"141","severity":1,"message":"163","line":5,"column":8,"nodeType":"143","messageId":"144","endLine":5,"endColumn":17},{"ruleId":"141","severity":1,"message":"164","line":6,"column":8,"nodeType":"143","messageId":"144","endLine":6,"endColumn":19},{"ruleId":"141","severity":1,"message":"165","line":9,"column":8,"nodeType":"143","messageId":"144","endLine":9,"endColumn":13},{"ruleId":"141","severity":1,"message":"166","line":110,"column":11,"nodeType":"143","messageId":"144","endLine":110,"endColumn":25},{"ruleId":"141","severity":1,"message":"165","line":3,"column":8,"nodeType":"143","messageId":"144","endLine":3,"endColumn":13},{"ruleId":"167","severity":1,"message":"168","line":24,"column":13,"nodeType":"169","endLine":24,"endColumn":72},"no-native-reassign",["170"],"no-negated-in-lhs",["171"],"no-unused-vars","'Cookies' is defined but never used.","Identifier","unusedVar","'cookies' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'Box' is defined but never used.","'pristine' is assigned a value but never used.","'reset' is assigned a value but never used.","'TextField' is defined but never used.","'Component' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",["170"],["171"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["172"],"'useSelector' is defined but never used.","'StepLabel' is defined but never used.","'StepContent' is defined but never used.","'Paper' is defined but never used.","'handleComplete' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"173","fix":"174"},"Update the dependencies array to be: [props]",{"range":"175","text":"176"},[3179,3181],"[props]"]